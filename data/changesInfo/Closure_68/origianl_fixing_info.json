{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest::testIssue477",
    "test.dir": "test",
    "clz.modified": "com.google.javascript.jscomp.parsing.JsDocInfoParser",
    "src.dir": "src"
  },
  "timeoutSecond": 300, 
  "proj": "Closure",
  "id": "68",
  "workingDir": "../bugs/Closure_68_buggy",
  "buggyCommit": "f392c8416faeb6dc41e663912ad7f4421d893a90",
  "inducingCommit": "3924ff1e4a236d68a0b5448d185537d90ca04419",
  "originalCommit": "a478193982ce1fb9271e3f7ebcc1369913c9a859",
  "bug_name": "Closure_68",
  "derive": "defects4j",
  "original_fixing_commit": "9d5a6e3082dd99f6c44df1b3526b9e83b79aa7da",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/Compiler.java",
        "src/com/google/javascript/jscomp/Compiler.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:initOptions:[CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:getParserConfig:[]:Config"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.Compiler:initOptions:[CompilerOptions options]:void",
            "com.google.javascript.jscomp.Compiler:getParserConfig:[]:Config"
          ],
          "num": 2
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "24",
            "256",
            "1643"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "23",
            "256",
            "257",
            "258",
            "259",
            "260",
            "261",
            "262",
            "263",
            "264",
            "265",
            "266",
            "267",
            "268",
            "269",
            "270",
            "271",
            "1657",
            "1658",
            "1659",
            "1660",
            "1661",
            "1662",
            "1663",
            "1664",
            "1665",
            "1666",
            "1667",
            "1668",
            "1670",
            "1671",
            "1672"
          ],
          "num": 32
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/Compiler.java b/src/com/google/javascript/jscomp/Compiler.java\nindex 9b269e8..0789e86 100644\n--- a/src/com/google/javascript/jscomp/Compiler.java\n+++ b/src/com/google/javascript/jscomp/Compiler.java\n@@ -21,7 +21,6 @@\n import com.google.common.base.Supplier;\n import com.google.common.collect.Lists;\n import com.google.common.collect.Maps;\n-import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.CompilerOptions.DevMode;\n import com.google.javascript.jscomp.CompilerOptions.LanguageMode;\n import com.google.javascript.jscomp.CompilerOptions.TracerMode;\n@@ -254,6 +253,22 @@\n       guards.add(new DiagnosticGroupWarningsGuard(\n           DiagnosticGroups.CHECK_VARIABLES, CheckLevel.OFF));\n     }\n+\n+    // DiagnosticGroups override the plain checkTypes option.\n+    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n+      options.checkTypes \u003d true;\n+    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n+      options.checkTypes \u003d false;\n+    } else if (!options.checkTypes) {\n+      // If DiagnosticGroups did not override the plain checkTypes\n+      // option, and checkTypes is enabled, then turn off the\n+      // parser type warnings.\n+      guards.add(\n+          new DiagnosticGroupWarningsGuard(\n+              DiagnosticGroup.forType(\n+                  RhinoErrorReporter.TYPE_PARSE_ERROR),\n+              CheckLevel.OFF));\n+    }\n     this.warningsGuard \u003d new ComposeWarningsGuard(guards);\n   }\n \n@@ -1639,8 +1654,22 @@\n   @Override\n   Config getParserConfig() {\n     if (parserConfig \u003d\u003d null) {\n+      Config.LanguageMode mode;\n+      switch (options.languageIn) {\n+        case ECMASCRIPT3:\n+          mode \u003d Config.LanguageMode.ECMASCRIPT3;\n+          break;\n+        case ECMASCRIPT5:\n+          mode \u003d Config.LanguageMode.ECMASCRIPT5;\n+          break;\n+        default:\n+          throw new IllegalStateException(\"unexpected language mode\");\n+      }\n+\n       parserConfig \u003d ParserRunner.createConfig(\n-        isIdeMode(), acceptEcmaScript5(), acceptConstKeyword());\n+        isIdeMode(),\n+        mode,\n+        acceptConstKeyword());\n     }\n     return parserConfig;\n   }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "IfStatement [8523,9100]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/DefaultPassConfig.java",
        "src/com/google/javascript/jscomp/DefaultPassConfig.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.DefaultPassConfig:getChecks:[]:List\u003cPassFactory\u003e"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "240"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/DefaultPassConfig.java b/src/com/google/javascript/jscomp/DefaultPassConfig.java\nindex 3d065d4..ab09265 100644\n--- a/src/com/google/javascript/jscomp/DefaultPassConfig.java\n+++ b/src/com/google/javascript/jscomp/DefaultPassConfig.java\n@@ -238,13 +238,6 @@\n       checks.add(objectPropertyStringPreprocess);\n     }\n \n-    // DiagnosticGroups override the plain checkTypes option.\n-    if (options.enables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes \u003d true;\n-    } else if (options.disables(DiagnosticGroups.CHECK_TYPES)) {\n-      options.checkTypes \u003d false;\n-    }\n-\n     if (options.checkTypes) {\n       checks.add(resolveTypes.makeOneTimePass());\n       checks.add(inferTypes.makeOneTimePass());\n",
      "operations": [
        {
          "type": "delete-tree",
          "from": "IfStatement [8041,8231]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java",
        "src/com/google/javascript/jscomp/RhinoErrorReporter.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.RhinoErrorReporter:makeError:[String message, String sourceName, int line, int lineOffset, CheckLevel defaultLevel]:JSError",
            "com.google.javascript.jscomp.RhinoErrorReporter:replacePlaceHolders:[String s]:String",
            "com.google.javascript.jscomp.RhinoErrorReporter:RhinoErrorReporter:[AbstractCompiler compiler]:null"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.RhinoErrorReporter:RhinoErrorReporter:[AbstractCompiler compiler]:null",
            "com.google.javascript.jscomp.RhinoErrorReporter:makeError:[String message, String sourceName, int line, int lineOffset, CheckLevel defaultLevel]:JSError",
            "com.google.javascript.jscomp.RhinoErrorReporter:replacePlaceHolders:[String s]:Pattern"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "37",
            "56",
            "65",
            "67",
            "93",
            "122",
            "123"
          ],
          "num": 7
        },
        {
          "qualified_names": [
            "38",
            "39",
            "40",
            "59",
            "68",
            "70",
            "96",
            "97",
            "98",
            "99",
            "100",
            "129",
            "130"
          ],
          "num": 13
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/RhinoErrorReporter.java b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\nindex cdcd2da..321cdd5 100644\n--- a/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n+++ b/src/com/google/javascript/jscomp/RhinoErrorReporter.java\n@@ -35,6 +35,9 @@\n   static final DiagnosticType PARSE_ERROR \u003d\n       DiagnosticType.error(\"JSC_PARSE_ERROR\", \"Parse error. {0}\");\n \n+  static final DiagnosticType TYPE_PARSE_ERROR \u003d\n+      DiagnosticType.warning(\"JSC_TYPE_PARSE_ERROR\", \"{0}\");\n+\n   // A special-cased error, so that it can be configured via the\n   // warnings API.\n   static final DiagnosticType EXTRA_FILEOVERVIEW \u003d\n@@ -53,7 +56,7 @@\n     DiagnosticType.warning(\"JSC_BAD_JSDOC_ANNOTATION\", \"Parse error. {0}\");\n \n   // A map of Rhino messages to their DiagnosticType.\n-  private final Map\u003cString, DiagnosticType\u003e typeMap;\n+  private final Map\u003cPattern, DiagnosticType\u003e typeMap;\n \n   private final AbstractCompiler compiler;\n \n@@ -62,9 +65,9 @@\n    * holder {0} with a wild card that matches all possible strings.\n    * Also put the any non-place-holder in quotes for regex matching later.\n    */\n-  private String replacePlaceHolders(String s) {\n+  private Pattern replacePlaceHolders(String s) {\n     s \u003d Pattern.quote(s);\n-    return s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\");\n+    return Pattern.compile(s.replaceAll(\"\\\\{\\\\d+\\\\}\", \"\\\\\\\\E.*\\\\\\\\Q\"));\n   }\n \n   private RhinoErrorReporter(AbstractCompiler compiler) {\n@@ -90,7 +93,11 @@\n \n         // Unknown @annotations.\n         replacePlaceHolders(ScriptRuntime.getMessage0(\"msg.bad.jsdoc.tag\")),\n-        BAD_JSDOC_ANNOTATION);\n+        BAD_JSDOC_ANNOTATION,\n+\n+        // Type annotation errors.\n+        Pattern.compile(\"^Bad type annotation.*\"),\n+        TYPE_PARSE_ERROR);\n   }\n \n   public static com.google.javascript.jscomp.mozilla.rhino.ErrorReporter\n@@ -119,8 +126,8 @@\n \n     // Try to see if the message is one of the rhino errors we want to\n     // expose as DiagnosticType by matching it with the regex key.\n-    for (Entry\u003cString, DiagnosticType\u003e entry : typeMap.entrySet()) {\n-      if (message.matches(entry.getKey())) {\n+    for (Entry\u003cPattern, DiagnosticType\u003e entry : typeMap.entrySet()) {\n+      if (entry.getKey().matcher(message).matches()) {\n         return JSError.make(\n             sourceName, line, lineOffset, entry.getValue(), message);\n       }\n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "FieldDeclaration [1258,1365]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [2591,2650]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [2591,2598]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: compile [2599,2606]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [2607,2649]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [3529,3570]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: TYPE_PARSE_ERROR [3580,3596]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [4668,4699]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [4668,4682]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: matcher [4683,4690]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [4691,4698]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "METHOD_INVOCATION_ARGUMENTS [4440,4454]",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/TypeCheck.java",
        "src/com/google/javascript/jscomp/TypeCheck.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [],
          "num": 0
        },
        {
          "qualified_names": [],
          "num": 0
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "240"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "241"
          ],
          "num": 1
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/TypeCheck.java b/src/com/google/javascript/jscomp/TypeCheck.java\nindex 41b94e0..fb0167f 100644\n--- a/src/com/google/javascript/jscomp/TypeCheck.java\n+++ b/src/com/google/javascript/jscomp/TypeCheck.java\n@@ -238,6 +238,7 @@\n       UNRESOLVED_TYPE,\n       WRONG_ARGUMENT_COUNT,\n       ILLEGAL_IMPLICIT_CAST,\n+      RhinoErrorReporter.TYPE_PARSE_ERROR,\n       TypedScopeCreator.UNKNOWN_LENDS,\n       TypedScopeCreator.LENDS_ON_NON_OBJECT,\n       TypedScopeCreator.CTOR_INITIALIZER,\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "QualifiedName: RhinoErrorReporter.TYPE_PARSE_ERROR [9024,9059]"
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addWarning:[String messageId, String messageArg, int lineno, int charno]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeString:[String typeString]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:reportTypeSyntaxWarning:[String warning]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseModifiesTag:[JsDocToken token]:JsDocToken",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse:[]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseSuppressTag:[JsDocToken token]:JsDocToken"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseSuppressTag:[JsDocToken token]:JsDocToken",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseModifiesTag:[JsDocToken token]:JsDocToken",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addTypeWarning:[String messageId, String messageArg, int lineno, int charno]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addParserWarning:[String messageId, String messageArg, int lineno, int charno]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addTypeWarning:[String messageId, int lineno, int charno]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse:[]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addParserWarning:[String messageId, int lineno, int charno]:void",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:reportTypeSyntaxWarning:[String warning]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseTypeString:[String typeString]:Node"
          ],
          "num": 9
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "23",
            "55",
            "56",
            "60",
            "130",
            "190",
            "203",
            "216",
            "225",
            "228",
            "237",
            "257",
            "260",
            "269",
            "300",
            "337",
            "345",
            "353",
            "361",
            "395",
            "402",
            "409",
            "414",
            "418",
            "425",
            "443",
            "447",
            "452",
            "464",
            "471",
            "479",
            "487",
            "500",
            "578",
            "612",
            "615",
            "648",
            "656",
            "664",
            "672",
            "680",
            "688",
            "700",
            "712",
            "733",
            "737",
            "749",
            "753",
            "789",
            "796",
            "825",
            "832",
            "839",
            "863",
            "903",
            "910",
            "923",
            "928",
            "950",
            "957",
            "970",
            "975",
            "2102"
          ],
          "num": 63
        },
        {
          "qualified_names": [
            "24",
            "56",
            "57",
            "61",
            "62",
            "66",
            "67",
            "68",
            "69",
            "70",
            "71",
            "72",
            "73",
            "74",
            "75",
            "76",
            "77",
            "78",
            "79",
            "80",
            "147",
            "207",
            "220",
            "233",
            "242",
            "245",
            "254",
            "274",
            "277",
            "286",
            "317",
            "354",
            "362",
            "370",
            "378",
            "412",
            "419",
            "426",
            "431",
            "435",
            "442",
            "460",
            "464",
            "469",
            "481",
            "488",
            "496",
            "504",
            "517",
            "595",
            "629",
            "632",
            "665",
            "673",
            "681",
            "689",
            "697",
            "705",
            "717",
            "729",
            "750",
            "754",
            "766",
            "770",
            "806",
            "813",
            "842",
            "849",
            "856",
            "880",
            "920",
            "927",
            "940",
            "945",
            "967",
            "974",
            "987",
            "992",
            "2119"
          ],
          "num": 79
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 623ac9a..5fd99d5 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -21,6 +21,7 @@\n import com.google.common.collect.Sets;\n import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;\n import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;\n+import com.google.javascript.jscomp.parsing.Config.LanguageMode;\n import com.google.javascript.rhino.JSDocInfo;\n import com.google.javascript.rhino.JSDocInfoBuilder;\n import com.google.javascript.rhino.JSTypeExpression;\n@@ -52,15 +53,31 @@\n   private final Node templateNode;\n \n   private class ErrorReporterParser {\n-    void addWarning(String messageId, String messageArg, int lineno,\n-                    int charno) {\n+    void addParserWarning(String messageId, String messageArg, int lineno,\n+        int charno) {\n       errorReporter.warning(ScriptRuntime.getMessage1(messageId, messageArg),\n           sourceName, lineno, null, charno);\n     }\n-    void addWarning(String messageId, int lineno, int charno) {\n+\n+    void addParserWarning(String messageId, int lineno, int charno) {\n       errorReporter.warning(ScriptRuntime.getMessage0(messageId),\n           sourceName, lineno, null, charno);\n     }\n+\n+    void addTypeWarning(String messageId, String messageArg, int lineno,\n+                    int charno) {\n+      errorReporter.warning(\n+          \"Bad type annotation. \" +\n+          ScriptRuntime.getMessage1(messageId, messageArg),\n+          sourceName, lineno, null, charno);\n+    }\n+\n+    void addTypeWarning(String messageId, int lineno, int charno) {\n+      errorReporter.warning(\n+          \"Bad type annotation. \" +\n+          ScriptRuntime.getMessage0(messageId),\n+          sourceName, lineno, null, charno);\n+    }\n   }\n \n   // The DocInfo with the fileoverview tag for the whole file.\n@@ -127,7 +144,7 @@\n         Sets.\u003cString\u003enewHashSet(),\n         Sets.\u003cString\u003enewHashSet(),\n         false,\n-        false,\n+        LanguageMode.ECMASCRIPT3,\n         false);\n     JsDocInfoParser parser \u003d new JsDocInfoParser(\n         new JsDocTokenStream(typeString),\n@@ -187,7 +204,7 @@\n             String annotationName \u003d stream.getString();\n             Annotation annotation \u003d annotationNames.get(annotationName);\n             if (annotation \u003d\u003d null) {\n-              parser.addWarning(\"msg.bad.jsdoc.tag\", annotationName,\n+              parser.addParserWarning(\"msg.bad.jsdoc.tag\", annotationName,\n                   stream.getLineno(), stream.getCharno());\n             } else {\n               // Mark the beginning of the annotation.\n@@ -200,7 +217,7 @@\n                     String author \u003d authorInfo.string;\n \n                     if (author.length() \u003d\u003d 0) {\n-                      parser.addWarning(\"msg.jsdoc.authormissing\",\n+                      parser.addParserWarning(\"msg.jsdoc.authormissing\",\n                           stream.getLineno(), stream.getCharno());\n                     } else {\n                       jsdocBuilder.addAuthor(author);\n@@ -213,7 +230,7 @@\n \n                 case CONSTANT:\n                   if (!jsdocBuilder.recordConstancy()) {\n-                    parser.addWarning(\"msg.jsdoc.const\",\n+                    parser.addParserWarning(\"msg.jsdoc.const\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -222,10 +239,10 @@\n                 case CONSTRUCTOR:\n                   if (!jsdocBuilder.recordConstructor()) {\n                     if (jsdocBuilder.isInterfaceRecorded()) {\n-                      parser.addWarning(\"msg.jsdoc.interface.constructor\",\n+                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                           stream.getLineno(), stream.getCharno());\n                     } else {\n-                      parser.addWarning(\"msg.jsdoc.incompat.type\",\n+                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                           stream.getLineno(), stream.getCharno());\n                     }\n                   }\n@@ -234,7 +251,7 @@\n \n                 case DEPRECATED:\n                   if (!jsdocBuilder.recordDeprecated()) {\n-                    parser.addWarning(\"msg.jsdoc.deprecated\",\n+                    parser.addParserWarning(\"msg.jsdoc.deprecated\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n \n@@ -254,10 +271,10 @@\n                 case INTERFACE:\n                   if (!jsdocBuilder.recordInterface()) {\n                     if (jsdocBuilder.isConstructorRecorded()) {\n-                      parser.addWarning(\"msg.jsdoc.interface.constructor\",\n+                      parser.addTypeWarning(\"msg.jsdoc.interface.constructor\",\n                           stream.getLineno(), stream.getCharno());\n                     } else {\n-                      parser.addWarning(\"msg.jsdoc.incompat.type\",\n+                      parser.addTypeWarning(\"msg.jsdoc.incompat.type\",\n                           stream.getLineno(), stream.getCharno());\n                     }\n                   }\n@@ -266,7 +283,7 @@\n \n                 case DESC:\n                   if (jsdocBuilder.isDescriptionRecorded()) {\n-                    parser.addWarning(\"msg.jsdoc.desc.extra\",\n+                    parser.addParserWarning(\"msg.jsdoc.desc.extra\",\n                         stream.getLineno(), stream.getCharno());\n                     token \u003d eatTokensUntilEOL();\n                     continue retry;\n@@ -297,7 +314,7 @@\n \n                   if (!jsdocBuilder.recordFileOverview(fileOverview) ||\n                       fileOverviewJSDocInfo !\u003d null) {\n-                    parser.addWarning(\"msg.jsdoc.fileoverview.extra\",\n+                    parser.addParserWarning(\"msg.jsdoc.fileoverview.extra\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   continue retry;\n@@ -334,7 +351,7 @@\n                     type \u003d createJSTypeExpression(newStringNode(\"number\"));\n                   }\n                   if (!jsdocBuilder.recordEnumParameterType(type)) {\n-                    parser.addWarning(\n+                    parser.addTypeWarning(\n                         \"msg.jsdoc.incompat.type\", lineno, charno);\n                   }\n                   token \u003d eatTokensUntilEOL(token);\n@@ -342,7 +359,7 @@\n \n                 case EXPORT:\n                   if (!jsdocBuilder.recordExport()) {\n-                    parser.addWarning(\"msg.jsdoc.export\",\n+                    parser.addParserWarning(\"msg.jsdoc.export\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -350,7 +367,7 @@\n \n                 case EXTERNS:\n                   if (!jsdocBuilder.recordExterns()) {\n-                    parser.addWarning(\"msg.jsdoc.externs\",\n+                    parser.addParserWarning(\"msg.jsdoc.externs\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -358,7 +375,7 @@\n \n                 case JAVA_DISPATCH:\n                   if (!jsdocBuilder.recordJavaDispatch()) {\n-                    parser.addWarning(\"msg.jsdoc.javadispatch\",\n+                    parser.addParserWarning(\"msg.jsdoc.javadispatch\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -392,37 +409,37 @@\n \n                     if (annotation \u003d\u003d Annotation.EXTENDS) {\n                       if (!jsdocBuilder.recordBaseType(type)) {\n-                        parser.addWarning(\n+                        parser.addTypeWarning(\n                             \"msg.jsdoc.incompat.type\", lineno, charno);\n                       }\n                     } else {\n                       Preconditions.checkState(\n                           annotation \u003d\u003d Annotation.IMPLEMENTS);\n                       if (!jsdocBuilder.recordImplementedInterface(type)) {\n-                        parser.addWarning(\"msg.jsdoc.implements.duplicate\",\n+                        parser.addTypeWarning(\"msg.jsdoc.implements.duplicate\",\n                             lineno, charno);\n                       }\n                     }\n                     token \u003d next();\n                     if (matchingRc) {\n                       if (token !\u003d JsDocToken.RC) {\n-                        parser.addWarning(\"msg.jsdoc.missing.rc\",\n+                        parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                             stream.getLineno(), stream.getCharno());\n                       }\n                     } else if (token !\u003d JsDocToken.EOL \u0026\u0026\n                         token !\u003d JsDocToken.EOF \u0026\u0026 token !\u003d JsDocToken.EOC) {\n-                      parser.addWarning(\"msg.end.annotation.expected\",\n+                      parser.addTypeWarning(\"msg.end.annotation.expected\",\n                           stream.getLineno(), stream.getCharno());\n                     }\n                   } else {\n-                    parser.addWarning(\"msg.no.type.name\", lineno, charno);\n+                    parser.addTypeWarning(\"msg.no.type.name\", lineno, charno);\n                   }\n                   token \u003d eatTokensUntilEOL(token);\n                   continue retry;\n \n                 case HIDDEN:\n                   if (!jsdocBuilder.recordHiddenness()) {\n-                    parser.addWarning(\"msg.jsdoc.hidden\",\n+                    parser.addParserWarning(\"msg.jsdoc.hidden\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -440,16 +457,16 @@\n                   if (match(JsDocToken.STRING)) {\n                     token \u003d next();\n                     if (!jsdocBuilder.recordLends(stream.getString())) {\n-                      parser.addWarning(\"msg.jsdoc.lends.incompatible\",\n+                      parser.addTypeWarning(\"msg.jsdoc.lends.incompatible\",\n                           stream.getLineno(), stream.getCharno());\n                     }\n                   } else {\n-                    parser.addWarning(\"msg.jsdoc.lends.missing\",\n+                    parser.addTypeWarning(\"msg.jsdoc.lends.missing\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n \n                   if (matchingRc \u0026\u0026 !match(JsDocToken.RC)) {\n-                    parser.addWarning(\"msg.jsdoc.missing.rc\",\n+                    parser.addTypeWarning(\"msg.jsdoc.missing.rc\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -461,14 +478,14 @@\n                   String meaning \u003d meaningInfo.string;\n                   token \u003d meaningInfo.token;\n                   if (!jsdocBuilder.recordMeaning(meaning)) {\n-                    parser.addWarning(\"msg.jsdoc.meaning.extra\",\n+                    parser.addParserWarning(\"msg.jsdoc.meaning.extra\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   continue retry;\n \n                 case NO_ALIAS:\n                   if (!jsdocBuilder.recordNoAlias()) {\n-                    parser.addWarning(\"msg.jsdoc.noalias\",\n+                    parser.addParserWarning(\"msg.jsdoc.noalias\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -476,7 +493,7 @@\n \n                 case NO_COMPILE:\n                   if (!jsdocBuilder.recordNoCompile()) {\n-                    parser.addWarning(\"msg.jsdoc.nocompile\",\n+                    parser.addParserWarning(\"msg.jsdoc.nocompile\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -484,7 +501,7 @@\n \n                 case NO_TYPE_CHECK:\n                   if (!jsdocBuilder.recordNoTypeCheck()) {\n-                    parser.addWarning(\"msg.jsdoc.nocheck\",\n+                    parser.addParserWarning(\"msg.jsdoc.nocheck\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -497,7 +514,7 @@\n                 case INHERIT_DOC:\n                 case OVERRIDE:\n                   if (!jsdocBuilder.recordOverride()) {\n-                    parser.addWarning(\"msg.jsdoc.override\",\n+                    parser.addTypeWarning(\"msg.jsdoc.override\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -575,7 +592,7 @@\n                   }\n \n                   if (JsDocToken.STRING !\u003d token) {\n-                    parser.addWarning(\"msg.missing.variable.name\",\n+                    parser.addTypeWarning(\"msg.missing.variable.name\",\n                         lineno, charno);\n                   } else {\n                     name \u003d stream.getString();\n@@ -609,10 +626,10 @@\n                       name \u003d null;\n                     } else if (!jsdocBuilder.recordParameter(name, type)) {\n                       if (jsdocBuilder.hasParameter(name)) {\n-                        parser.addWarning(\"msg.dup.variable.name\", name,\n+                        parser.addTypeWarning(\"msg.dup.variable.name\", name,\n                             lineno, charno);\n                       } else {\n-                        parser.addWarning(\"msg.jsdoc.incompat.type\", name,\n+                        parser.addTypeWarning(\"msg.jsdoc.incompat.type\", name,\n                             lineno, charno);\n                       }\n                     }\n@@ -645,7 +662,7 @@\n \n                 case PRESERVE_TRY:\n                   if (!jsdocBuilder.recordPreserveTry()) {\n-                    parser.addWarning(\"msg.jsdoc.preservertry\",\n+                    parser.addParserWarning(\"msg.jsdoc.preservertry\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -653,7 +670,7 @@\n \n                 case PRIVATE:\n                   if (!jsdocBuilder.recordVisibility(Visibility.PRIVATE)) {\n-                    parser.addWarning(\"msg.jsdoc.visibility.private\",\n+                    parser.addParserWarning(\"msg.jsdoc.visibility.private\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -661,7 +678,7 @@\n \n                 case PROTECTED:\n                   if (!jsdocBuilder.recordVisibility(Visibility.PROTECTED)) {\n-                    parser.addWarning(\"msg.jsdoc.visibility.protected\",\n+                    parser.addParserWarning(\"msg.jsdoc.visibility.protected\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -669,7 +686,7 @@\n \n                 case PUBLIC:\n                   if (!jsdocBuilder.recordVisibility(Visibility.PUBLIC)) {\n-                    parser.addWarning(\"msg.jsdoc.visibility.public\",\n+                    parser.addParserWarning(\"msg.jsdoc.visibility.public\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -677,7 +694,7 @@\n \n                 case NO_SHADOW:\n                   if (!jsdocBuilder.recordNoShadow()) {\n-                    parser.addWarning(\"msg.jsdoc.noshadow\",\n+                    parser.addParserWarning(\"msg.jsdoc.noshadow\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -685,7 +702,7 @@\n \n                 case NO_SIDE_EFFECTS:\n                   if (!jsdocBuilder.recordNoSideEffects()) {\n-                    parser.addWarning(\"msg.jsdoc.nosideeffects\",\n+                    parser.addParserWarning(\"msg.jsdoc.nosideeffects\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -697,7 +714,7 @@\n \n                 case IMPLICIT_CAST:\n                   if (!jsdocBuilder.recordImplicitCast()) {\n-                    parser.addWarning(\"msg.jsdoc.implicitcast\",\n+                    parser.addTypeWarning(\"msg.jsdoc.implicitcast\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n                   token \u003d eatTokensUntilEOL();\n@@ -709,7 +726,7 @@\n                     String reference \u003d referenceInfo.string;\n \n                     if (reference.length() \u003d\u003d 0) {\n-                      parser.addWarning(\"msg.jsdoc.seemissing\",\n+                      parser.addParserWarning(\"msg.jsdoc.seemissing\",\n                           stream.getLineno(), stream.getCharno());\n                     } else {\n                       jsdocBuilder.addReference(reference);\n@@ -730,11 +747,11 @@\n                   String templateTypeName \u003d templateInfo.string;\n \n                   if (templateTypeName.length() \u003d\u003d 0) {\n-                    parser.addWarning(\"msg.jsdoc.templatemissing\",\n+                    parser.addTypeWarning(\"msg.jsdoc.templatemissing\",\n                           stream.getLineno(), stream.getCharno());\n                   } else if (!jsdocBuilder.recordTemplateTypeName(\n                       templateTypeName)) {\n-                    parser.addWarning(\"msg.jsdoc.template.at.most.once\",\n+                    parser.addTypeWarning(\"msg.jsdoc.template.at.most.once\",\n                         stream.getLineno(), stream.getCharno());\n                   }\n \n@@ -746,11 +763,11 @@\n                   String version \u003d versionInfo.string;\n \n                   if (version.length() \u003d\u003d 0) {\n-                    parser.addWarning(\"msg.jsdoc.versionmissing\",\n+                    parser.addParserWarning(\"msg.jsdoc.versionmissing\",\n                           stream.getLineno(), stream.getCharno());\n                   } else {\n                     if (!jsdocBuilder.recordVersion(version)) {\n-                       parser.addWarning(\"msg.jsdoc.extraversion\",\n+                       parser.addParserWarning(\"msg.jsdoc.extraversion\",\n                           stream.getLineno(), stream.getCharno());\n                     }\n                   }\n@@ -786,14 +803,14 @@\n                     switch (annotation) {\n                       case DEFINE:\n                         if (!jsdocBuilder.recordDefineType(type)) {\n-                          parser.addWarning(\"msg.jsdoc.define\",\n+                          parser.addParserWarning(\"msg.jsdoc.define\",\n                               lineno, charno);\n                         }\n                         break;\n \n                       case RETURN:\n                         if (!jsdocBuilder.recordReturnType(type)) {\n-                          parser.addWarning(\n+                          parser.addTypeWarning(\n                               \"msg.jsdoc.incompat.type\", lineno, charno);\n                           break;\n                         }\n@@ -822,21 +839,21 @@\n \n                       case THIS:\n                         if (!jsdocBuilder.recordThisType(type)) {\n-                          parser.addWarning(\n+                          parser.addTypeWarning(\n                               \"msg.jsdoc.incompat.type\", lineno, charno);\n                         }\n                         break;\n \n                       case TYPE:\n                         if (!jsdocBuilder.recordType(type)) {\n-                          parser.addWarning(\n+                          parser.addTypeWarning(\n                               \"msg.jsdoc.incompat.type\", lineno, charno);\n                         }\n                         break;\n \n                       case TYPEDEF:\n                         if (!jsdocBuilder.recordTypedef(type)) {\n-                          parser.addWarning(\n+                          parser.addTypeWarning(\n                               \"msg.jsdoc.incompat.type\", lineno, charno);\n                         }\n                         break;\n@@ -860,7 +877,7 @@\n         case EOF:\n           // discard any accumulated information\n           jsdocBuilder.build(null);\n-          parser.addWarning(\"msg.unexpected.eof\",\n+          parser.addParserWarning(\"msg.unexpected.eof\",\n               stream.getLineno(), stream.getCharno());\n           return false;\n \n@@ -900,14 +917,14 @@\n         if (match(JsDocToken.STRING)) {\n           String name \u003d stream.getString();\n           if (!suppressionNames.contains(name)) {\n-            parser.addWarning(\"msg.jsdoc.suppress.unknown\", name,\n+            parser.addParserWarning(\"msg.jsdoc.suppress.unknown\", name,\n                 stream.getLineno(), stream.getCharno());\n           }\n \n           suppressions.add(stream.getString());\n           token \u003d next();\n         } else {\n-          parser.addWarning(\"msg.jsdoc.suppress\",\n+          parser.addParserWarning(\"msg.jsdoc.suppress\",\n               stream.getLineno(), stream.getCharno());\n           return token;\n         }\n@@ -920,12 +937,12 @@\n       }\n \n       if (!match(JsDocToken.RC)) {\n-        parser.addWarning(\"msg.jsdoc.suppress\",\n+        parser.addParserWarning(\"msg.jsdoc.suppress\",\n             stream.getLineno(), stream.getCharno());\n       } else {\n         token \u003d next();\n         if (!jsdocBuilder.recordSuppressions(suppressions)) {\n-          parser.addWarning(\"msg.jsdoc.suppress.duplicate\",\n+          parser.addParserWarning(\"msg.jsdoc.suppress.duplicate\",\n               stream.getLineno(), stream.getCharno());\n         }\n       }\n@@ -947,14 +964,14 @@\n           String name \u003d stream.getString();\n           if (!modifiesAnnotationKeywords.contains(name)\n               \u0026\u0026 !jsdocBuilder.hasParameter(name)) {\n-              parser.addWarning(\"msg.jsdoc.modifies.unknown\", name,\n+              parser.addParserWarning(\"msg.jsdoc.modifies.unknown\", name,\n                   stream.getLineno(), stream.getCharno());\n           }\n \n           modifies.add(stream.getString());\n           token \u003d next();\n         } else {\n-          parser.addWarning(\"msg.jsdoc.modifies\",\n+          parser.addParserWarning(\"msg.jsdoc.modifies\",\n               stream.getLineno(), stream.getCharno());\n           return token;\n         }\n@@ -967,12 +984,12 @@\n       }\n \n       if (!match(JsDocToken.RC)) {\n-        parser.addWarning(\"msg.jsdoc.modifies\",\n+        parser.addParserWarning(\"msg.jsdoc.modifies\",\n             stream.getLineno(), stream.getCharno());\n       } else {\n         token \u003d next();\n         if (!jsdocBuilder.recordModifies(modifies)) {\n-          parser.addWarning(\"msg.jsdoc.modifies.duplicate\",\n+          parser.addParserWarning(\"msg.jsdoc.modifies.duplicate\",\n               stream.getLineno(), stream.getCharno());\n         }\n       }\n@@ -2099,7 +2116,7 @@\n   }\n \n   private Node reportTypeSyntaxWarning(String warning) {\n-    parser.addWarning(warning, stream.getLineno(), stream.getCharno());\n+    parser.addTypeWarning(warning, stream.getLineno(), stream.getCharno());\n     return null;\n   }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2477,2755]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodDeclaration [2761,2988]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [33813,33831]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [33833,33851]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [16251,16269]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "MethodInvocation [16271,16289]"
        },
        {
          "type": "update-node",
          "from": "",
          "to": ""
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [24026,24030]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: lineno [24060,24066]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: charno [24068,24074]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: name [24181,24185]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: lineno [24215,24221]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: charno [24223,24229]"
        },
        {
          "type": "delete-node",
          "from": "SimpleName: lineno [32170,32176]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: charno [32178,32184]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [15643,15661]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "MethodInvocation [15663,15681]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [23360,23364]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: name [23511,23515]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: lineno [32448,32454]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: charno [32456,32462]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ExpressionStatement [32995,33089]",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "multi-move-tree",
          "from": "",
          "to": ""
        }
      ]
    },
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/rhino/jstype/NamedType.java",
        "src/com/google/javascript/rhino/jstype/NamedType.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.NamedType:isEquivalentTo:[JSType that]:boolean",
            "com.google.javascript.rhino.jstype.NamedType:handleUnresolvedType:[ErrorReporter t, boolean ignoreForwardReferencedTypes]:void",
            "com.google.javascript.rhino.jstype.NamedType:NamedType:[JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno]:null",
            "com.google.javascript.rhino.jstype.NamedType:lookupViaProperties:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:JSType"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "com.google.javascript.rhino.jstype.NamedType:defineProperty:[String propertyName, JSType type, boolean inferred, boolean inExterns, Node propertyNode]:boolean",
            "com.google.javascript.rhino.jstype.NamedType:finishPropertyContinuations:[]:void",
            "com.google.javascript.rhino.jstype.NamedType\\$PropertyContinuation:commit:[ObjectType target]:void",
            "com.google.javascript.rhino.jstype.NamedType:NamedType:[JSTypeRegistry registry, String reference, String sourceName, int lineno, int charno]:null",
            "com.google.javascript.rhino.jstype.NamedType\\$PropertyContinuation:PropertyContinuation:[String propertyName, JSType type, boolean inferred, boolean inExterns, Node propertyNode]:null",
            "com.google.javascript.rhino.jstype.NamedType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:JSType",
            "com.google.javascript.rhino.jstype.NamedType:handleUnresolvedType:[ErrorReporter t, boolean ignoreForwardReferencedTypes]:void"
          ],
          "num": 7
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "43",
            "103",
            "121",
            "196",
            "206",
            "331",
            "332",
            "375"
          ],
          "num": 8
        },
        {
          "qualified_names": [
            "44",
            "46",
            "47",
            "48",
            "108",
            "109",
            "110",
            "111",
            "112",
            "131",
            "132",
            "133",
            "134",
            "135",
            "136",
            "137",
            "138",
            "139",
            "140",
            "141",
            "142",
            "143",
            "144",
            "145",
            "146",
            "147",
            "148",
            "149",
            "150",
            "151",
            "152",
            "153",
            "154",
            "155",
            "156",
            "157",
            "158",
            "159",
            "160",
            "161",
            "237",
            "248",
            "249",
            "250",
            "375",
            "376",
            "420",
            "421",
            "422",
            "423",
            "424",
            "425",
            "426",
            "427",
            "428",
            "429",
            "430",
            "431",
            "432",
            "433",
            "434",
            "435",
            "436",
            "437",
            "438",
            "439",
            "440",
            "441",
            "442",
            "443",
            "444",
            "445",
            "446"
          ],
          "num": 73
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/rhino/jstype/NamedType.java b/src/com/google/javascript/rhino/jstype/NamedType.java\nindex 8d1e55b..ba8421a 100644\n--- a/src/com/google/javascript/rhino/jstype/NamedType.java\n+++ b/src/com/google/javascript/rhino/jstype/NamedType.java\n@@ -41,7 +41,11 @@\n \n import com.google.common.base.Preconditions;\n import com.google.common.base.Predicate;\n+import com.google.common.collect.Lists;\n import com.google.javascript.rhino.ErrorReporter;\n+import com.google.javascript.rhino.Node;\n+\n+import java.util.List;\n \n /**\n  * A {@code NamedType} is a named reference to some other type.  This provides\n@@ -101,6 +105,11 @@\n   private boolean forgiving \u003d false;\n \n   /**\n+   * Property-defining continuations.\n+   */\n+  private List\u003cPropertyContinuation\u003e propertyContinuations \u003d null;\n+\n+  /**\n    * Create a named type based on the reference.\n    */\n   NamedType(JSTypeRegistry registry, String reference,\n@@ -119,6 +128,37 @@\n     forgiving \u003d true;\n   }\n \n+  @Override\n+  boolean defineProperty(String propertyName, JSType type,\n+      boolean inferred, boolean inExterns, Node propertyNode) {\n+    if (!isResolved()) {\n+      // If this is an unresolved object type, we need to save all its\n+      // properties and define them when it is resolved.\n+      if (propertyContinuations \u003d\u003d null) {\n+        propertyContinuations \u003d Lists.newArrayList();\n+      }\n+      propertyContinuations.add(\n+          new PropertyContinuation(\n+              propertyName, type, inferred, inExterns, propertyNode));\n+      return true;\n+    } else {\n+      return super.defineProperty(\n+          propertyName, type, inferred, inExterns, propertyNode);\n+    }\n+  }\n+\n+  private void finishPropertyContinuations() {\n+    ObjectType referencedObjType \u003d getReferencedObjTypeInternal();\n+    if (referencedObjType !\u003d null \u0026\u0026 !referencedObjType.isUnknownType()) {\n+      if (propertyContinuations !\u003d null) {\n+        for (PropertyContinuation c : propertyContinuations) {\n+          c.commit(this);\n+        }\n+      }\n+    }\n+    propertyContinuations \u003d null;\n+  }\n+\n   /** Returns the type to which this refers (which is unknown if unresolved). */\n   public JSType getReferencedType() {\n     return getReferencedTypeInternal();\n@@ -194,6 +234,7 @@\n \n     if (resolved) {\n       super.resolveInternal(t, enclosing);\n+      finishPropertyContinuations();\n       return registry.isLastGeneration() ?\n           getReferencedType() : this;\n     }\n@@ -204,6 +245,9 @@\n     }\n \n     super.resolveInternal(t, enclosing);\n+    if (isResolved()) {\n+      finishPropertyContinuations();\n+    }\n     return registry.isLastGeneration() ?\n         getReferencedType() : this;\n   }\n@@ -328,8 +372,8 @@\n           registry.isForwardDeclaredType(reference);\n       boolean beForgiving \u003d forgiving || isForwardDeclared;\n       if (!beForgiving \u0026\u0026 registry.isLastGeneration()) {\n-        t.warning(\"Unknown type \" + reference, sourceName, lineno, null,\n-            charno);\n+        t.warning(\"Bad type annotation. Unknown type \" + reference,\n+            sourceName, lineno, null, charno);\n       } else {\n         if (isForwardDeclared) {\n           setReferencedType(\n@@ -373,4 +417,31 @@\n       return true;\n     }\n   }\n+\n+  /** Store enough information to define a property at a later time. */\n+  private static final class PropertyContinuation {\n+    private final String propertyName;\n+    private final JSType type;\n+    private final boolean inferred;\n+    private final boolean inExterns;\n+    private final Node propertyNode;\n+\n+    private PropertyContinuation(\n+        String propertyName,\n+        JSType type,\n+        boolean inferred,\n+        boolean inExterns,\n+        Node propertyNode) {\n+      this.propertyName \u003d propertyName;\n+      this.type \u003d type;\n+      this.inferred \u003d inferred;\n+      this.inExterns \u003d inExterns;\n+      this.propertyNode \u003d propertyNode;\n+    }\n+\n+    void commit(ObjectType target) {\n+      target.defineProperty(\n+          propertyName, type, inferred, inExterns, propertyNode);\n+    }\n+  }\n }\n",
      "operations": [
        {
          "type": "update-node",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "com.google.javascript.rhino.jstype.NamedType:resolveInternal:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:JSType",
        "com.google.javascript.rhino.jstype.NamedType\\$PropertyContinuation:commit:[ObjectType target]:void",
        "com.google.javascript.jscomp.RhinoErrorReporter:replacePlaceHolders:[String s]:Pattern",
        "com.google.javascript.rhino.jstype.NamedType:defineProperty:[String propertyName, JSType type, boolean inferred, boolean inExterns, Node propertyNode]:boolean",
        "com.google.javascript.rhino.jstype.NamedType:finishPropertyContinuations:[]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addTypeWarning:[String messageId, int lineno, int charno]:void",
        "com.google.javascript.rhino.jstype.NamedType\\$PropertyContinuation:PropertyContinuation:[String propertyName, JSType type, boolean inferred, boolean inExterns, Node propertyNode]:null",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addParserWarning:[String messageId, String messageArg, int lineno, int charno]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addTypeWarning:[String messageId, String messageArg, int lineno, int charno]:void",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addParserWarning:[String messageId, int lineno, int charno]:void"
      ],
      "num": 10
    },
    "delete_functions": {
      "qualified_names": [
        "com.google.javascript.rhino.jstype.NamedType:isEquivalentTo:[JSType that]:boolean",
        "com.google.javascript.jscomp.parsing.JsDocInfoParser\\$ErrorReporterParser:addWarning:[String messageId, String messageArg, int lineno, int charno]:void",
        "com.google.javascript.jscomp.RhinoErrorReporter:replacePlaceHolders:[String s]:String",
        "com.google.javascript.rhino.jstype.NamedType:lookupViaProperties:[ErrorReporter t, StaticScope\u003cJSType\u003e enclosing]:JSType"
      ],
      "num": 4
    }
  },
  "trigger_tests": [
    {
      "test_class": "com.google.javascript.jscomp.parsing.JsDocInfoParserTest",
      "test_function": "testIssue477",
      "assertion_line": "509",
      "exception": "junit.framework.AssertionFailedError",
      "message": "extra warning: Unexpected end of file"
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java",
        "src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFunctionType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse:[]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseBasicTypeExpression:[JsDocToken token]:Node"
          ],
          "num": 3
        },
        {
          "qualified_names": [
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseFunctionType:[JsDocToken token]:Node",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse:[]:boolean",
            "com.google.javascript.jscomp.parsing.JsDocInfoParser:parseBasicTypeExpression:[JsDocToken token]:Node"
          ],
          "num": 3
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "868",
            "869",
            "1708",
            "1760"
          ],
          "num": 4
        },
        {
          "qualified_names": [
            "869",
            "870",
            "1709",
            "1762"
          ],
          "num": 4
        }
      ],
      "diff": "diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\nindex 9ceae7c..167e2cb 100644\n--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java\n@@ -865,9 +865,9 @@\n                         }\n                         break;\n                     }\n-\n-                    token \u003d eatTokensUntilEOL();\n                   }\n+\n+                  token \u003d eatTokensUntilEOL();\n                   continue retry;\n               }\n             }\n@@ -1706,6 +1706,7 @@\n       }\n     }\n \n+    restoreLookAhead(token);\n     return reportGenericTypeSyntaxWarning();\n   }\n \n@@ -1758,6 +1759,7 @@\n     // NOTE(nicksantos): We\u0027re not implementing generics at the moment, so\n     // just throw out TypeParameters.\n     if (token !\u003d JsDocToken.LP) {\n+      restoreLookAhead(token);\n       return reportTypeSyntaxWarning(\"msg.jsdoc.missing.lp\");\n     }\n \n",
      "operations": [
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [57643,57667]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "ExpressionStatement [59135,59159]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "com.google.javascript.jscomp.parsing.JsDocInfoParser:parse()Z:regression"
    ],
    "num": 1
  }
}