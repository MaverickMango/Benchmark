diff --git a/src/main/java/org/jsoup/nodes/Entities.java b/src/main/java/org/jsoup/nodes/Entities.java
index 37266af..35a6666 100644
--- a/src/main/java/org/jsoup/nodes/Entities.java
+++ b/src/main/java/org/jsoup/nodes/Entities.java
@@ -1,10 +1,9 @@
 package org.jsoup.nodes;
 
-import org.jsoup.parser.TokenQueue;
-
 import java.util.HashMap;
 import java.util.Map;
-import java.nio.charset.Charset;
+import java.util.regex.Pattern;
+import java.util.regex.Matcher;
 import java.nio.charset.CharsetEncoder;
 
 /**
@@ -23,6 +22,7 @@
     private static final Map<String, Character> full;
     private static final Map<Character, String> baseByVal;
     private static final Map<Character, String> fullByVal;
+    private static final Pattern unescapePattern = Pattern.compile("&(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?");
 
     static String escape(String string, CharsetEncoder encoder, EscapeMode escapeMode) {
         StringBuilder accum = new StringBuilder(string.length() * 2);
@@ -45,52 +45,32 @@
         if (!string.contains("&"))
             return string;
 
-        StringBuilder accum = new StringBuilder(string.length());
-        TokenQueue cq = new TokenQueue(string);
+        Matcher m = unescapePattern.matcher(string); // &(#(x|X)?([0-9a-fA-F]+)|[a-zA-Z]+);?
+        StringBuffer accum = new StringBuffer(string.length()); // pity matcher can't use stringbuilder, avoid syncs
 
-        // formats dealt with: [&amp] (no semi), [&amp;], [&#123;] (int), &#
-        while (!cq.isEmpty()) {
-            accum.append(cq.consumeTo("&"));
-            if (!cq.matches("&")) { // ran to end
-                accum.append(cq.remainder());
-                break;
-            }
-            cq.advance(); // past &
-            String val;
+        while (m.find()) {
             int charval = -1;
-
-            boolean isNum = false;
-            if (cq.matches("#")) {
-                isNum = true;
-                cq.consume();
-            }
-            val = cq.consumeWord(); // and num!
-            if (val.length() == 0) {
-                accum.append("&");
-                continue;
-            }
-            if (cq.matches(";"))
-                cq.advance();
-
-            if (isNum) {
+            String num = m.group(3);
+            if (num != null) {
                 try {
-                    if (val.charAt(0) == 'x' || val.charAt(0) == 'X')
-                        charval = Integer.valueOf(val.substring(1), 16);
-                    else
-                        charval = Integer.valueOf(val, 10);
+                    int base = m.group(2) != null ? 16 : 10; // 2 is hex indicator
+                    charval = Integer.valueOf(num, base);
                 } catch (NumberFormatException e) {
-                    // skip
-                }
+                } // skip
             } else {
-                if (full.containsKey(val.toLowerCase()))
-                    charval = full.get(val.toLowerCase());
+                String name = m.group(1).toLowerCase();
+                if (full.containsKey(name))
+                    charval = full.get(name);
             }
-            if (charval == -1 || charval > 0xFFFF) // out of range
-                accum.append("&").append(val).append(";");
-            else
-                accum.append((char) charval);
-        }
 
+            if (charval != -1 || charval > 0xFFFF) { // out of range
+                String c = Character.toString((char) charval);
+                m.appendReplacement(accum, c);
+            } else {
+                m.appendReplacement(accum, m.group(0)); // replace with original string
+            }
+        }
+        m.appendTail(accum);
         return accum.toString();
     }
 
diff --git a/src/test/java/org/jsoup/nodes/EntitiesTest.java b/src/test/java/org/jsoup/nodes/EntitiesTest.java
index f141c85..cdf84f6 100644
--- a/src/test/java/org/jsoup/nodes/EntitiesTest.java
+++ b/src/test/java/org/jsoup/nodes/EntitiesTest.java
@@ -24,7 +24,6 @@
         String text = "Hello &amp;&LT&gt; &ANGST &#960; &#960 &#x65B0; there &!";
         assertEquals("Hello &<> Å π π 新 there &!", Entities.unescape(text));
 
-        assertEquals("&0987654321; &unknown;", Entities.unescape("&0987654321; &unknown"));
-        // these missed encodes aren't 100%, not sure how correct the fallback need to be
+        assertEquals("&0987654321; &unknown", Entities.unescape("&0987654321; &unknown"));
     }
 }
