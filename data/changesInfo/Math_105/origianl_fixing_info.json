{
  "logger": {
    "currentLogLevel": 20,
    "name": "root.bean.benchmarks.Defects4JBug"
  },
  "d4jCmd": "/home/liumengjiao/Desktop/defects4j/framework/bin/defects4j",
  "dataDir": "data/changesInfo/",
  "properties": {
    "trigger.tests": "org.apache.commons.math.stat.regression.SimpleRegressionTest::testSSENonNegative",
    "test.dir": "src/test",
    "clz.modified": "org.apache.commons.math.stat.regression.SimpleRegression",
    "src.dir": "src/java"
  },
  "timeoutSecond": 300,
  "proj": "Math",
  "id": "105",
  "workingDir": "../bugs/Math_105_buggy",
  "buggyCommit": "ab1b9500fd4b6898757e9c74dc2eeae692b25146",
  "inducingCommit": "d1916458812f417874b0886ed64654bb6a0b8224",
  "originalCommit": "03a43587a64873693855606fff17ad8ad3e99699",
  "bug_name": "Math_105",
  "derive": "defects4j",
  "original_fixing_commit": "fc21b26f84312e4f75e8b144238618c73a8b091f",
  "buildFiles_changed": false,
  "regression": true,
  "inducing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "src/java/org/apache/commons/math/stat/regression/SimpleRegression.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.SimpleRegression:getRSquare:[]:double",
            "org.apache.commons.math.stat.regression.SimpleRegression:getRSquare:[double b1]:double",
            "org.apache.commons.math.stat.regression.SimpleRegression:getR:[]:double",
            "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors:[double b1]:double",
            "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors:[]:double",
            "org.apache.commons.math.stat.regression.SimpleRegression:getRegressionSumSquares:[double slope]:double"
          ],
          "num": 6
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.SimpleRegression:getRSquare:[]:double",
            "org.apache.commons.math.stat.regression.SimpleRegression:getR:[]:double",
            "org.apache.commons.math.stat.regression.SimpleRegression:getIntercept:[double slope]:double",
            "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors:[]:double"
          ],
          "num": 4
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "249",
            "322",
            "344",
            "485",
            "486",
            "487",
            "488",
            "489",
            "490",
            "491",
            "492",
            "493",
            "494",
            "495",
            "496",
            "497",
            "498",
            "499",
            "500",
            "501",
            "502",
            "503",
            "504",
            "505",
            "506",
            "507",
            "508",
            "509",
            "510"
          ],
          "num": 29
        },
        {
          "qualified_names": [
            "249",
            "322",
            "344",
            "345",
            "483"
          ],
          "num": 5
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\nindex 552b300..c105a41 100644\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -246,7 +246,7 @@\n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n-        return getSumSquaredErrors(getSlope());\n+        return sumYY - sumXY * sumXY / sumXX;\n     }\n \n     /**\n@@ -319,7 +319,7 @@\n      */\n     public double getR() {\n         double b1 \u003d getSlope();\n-        double result \u003d Math.sqrt(getRSquare(b1));\n+        double result \u003d Math.sqrt(getRSquare());\n         if (b1 \u003c 0) {\n             result \u003d -result;\n         }\n@@ -341,7 +341,8 @@\n      * @return r-square\n      */\n     public double getRSquare() {\n-        return getRSquare(getSlope());\n+        double ssto \u003d getTotalSumSquares();\n+        return (ssto - getSumSquaredErrors()) / ssto;\n     }\n \n     /**\n@@ -482,32 +483,6 @@\n     }\n \n     /**\n-     * Returns the sum of squared errors associated with the regression \n-     * model, using the slope of the regression line. \n-     * \u003cp\u003e \n-     * Returns NaN if the slope is NaN.\n-     * \n-     * @param b1 current slope\n-     * @return sum of squared errors associated with the regression model\n-     */\n-    private double getSumSquaredErrors(double b1) {\n-        return sumYY - sumXY * sumXY / sumXX;\n-    }\n-\n-    /** \n-     * Computes r-square from the slope.\n-     * \u003cp\u003e\n-     * will return NaN if slope is Nan.\n-     *\n-     * @param b1 current slope\n-     * @return r-square\n-     */\n-    private double getRSquare(double b1) {\n-        double ssto \u003d getTotalSumSquares();\n-        return (ssto - getSumSquaredErrors(b1)) / ssto;\n-    }\n-\n-    /**\n      * Computes SSR from b1.\n      * \n      * @param slope regression slope estimate\n",
      "operations": [
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [8546,8585]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_ARGUMENTS [11032,11034]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "METHOD_INVOCATION_ARGUMENTS [17859,17861]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "ReturnStatement [11681,11711]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [17148,17452]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [17457,17464]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [17465,17471]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: getSumSquaredErrors [17472,17491]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [17492,17501]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [17503,17556]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [17148,17556]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "Javadoc [17562,17728]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Modifier: private [17733,17740]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "PrimitiveType: double [17741,17747]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "SimpleName: getRSquare [17748,17758]",
          "to": ""
        },
        {
          "type": "delete-tree",
          "from": "SingleVariableDeclaration [17759,17768]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "Block [17770,17877]",
          "to": ""
        },
        {
          "type": "delete-node",
          "from": "MethodDeclaration [17562,17877]",
          "to": ""
        }
      ]
    }
  ],
  "inducing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [
        "org.apache.commons.math.stat.regression.SimpleRegression:getIntercept:[double slope]:double"
      ],
      "num": 1
    },
    "delete_functions": {
      "qualified_names": [
        "org.apache.commons.math.stat.regression.SimpleRegression:getRSquare:[double b1]:double",
        "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors:[double b1]:double",
        "org.apache.commons.math.stat.regression.SimpleRegression:getRegressionSumSquares:[double slope]:double"
      ],
      "num": 3
    }
  },
  "trigger_tests": [
    {
      "test_class": "org.apache.commons.math.stat.regression.SimpleRegressionTest",
      "test_function": "testSSENonNegative",
      "assertion_line": "275",
      "exception": "junit.framework.AssertionFailedError",
      "message": ""
    }
  ],
  "fixing_changes": [
    {
      "changed_type": "UPDATE",
      "changed_class": [
        "src/java/org/apache/commons/math/stat/regression/SimpleRegression.java",
        "src/java/org/apache/commons/math/stat/regression/SimpleRegression.java"
      ],
      "changed_functions": [
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors:[]:double"
          ],
          "num": 1
        },
        {
          "qualified_names": [
            "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors:[]:double"
          ],
          "num": 1
        }
      ],
      "changed_lines": [
        {
          "qualified_names": [
            "238",
            "249"
          ],
          "num": 2
        },
        {
          "qualified_names": [
            "239",
            "240",
            "241",
            "242",
            "243",
            "244",
            "245",
            "246",
            "247",
            "248",
            "249",
            "250",
            "251",
            "252",
            "253",
            "264"
          ],
          "num": 16
        }
      ],
      "diff": "diff --git a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\nindex c105a41..d9fa592 100644\n--- a/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n+++ b/src/java/org/apache/commons/math/stat/regression/SimpleRegression.java\n@@ -236,6 +236,21 @@\n      * sum of squared errors\u003c/a\u003e (SSE) associated with the regression \n      * model.\n      * \u003cp\u003e\n+     * The sum is computed using the computational formula\n+     * \u003cp\u003e\n+     * \u003ccode\u003eSSE \u003d SYY - (SXY * SXY / SXX)\u003c/code\u003e\n+     * \u003cp\u003e\n+     * where \u003ccode\u003eSYY\u003c/code\u003e is the sum of the squared deviations of the y\n+     * values about their mean, \u003ccode\u003eSXX\u003c/code\u003e is similarly defined and\n+     * \u003ccode\u003eSXY\u003c/code\u003e is the sum of the products of x and y mean deviations.\n+     * \u003cp\u003e\n+     * The sums are accumulated using the updating algorithm referenced in \n+     * {@link #addData}.  \n+     * \u003cp\u003e\n+     * The return value is constrained to be non-negative - i.e., if due to \n+     * rounding errors the computational formula returns a negative result, \n+     * 0 is returned.\n+     * \u003cp\u003e\n      * \u003cstrong\u003ePreconditions\u003c/strong\u003e: \u003cul\u003e\n      * \u003cli\u003eAt least two observations (with at least two different x values)\n      * must have been added before invoking this method. If this method is \n@@ -246,7 +261,7 @@\n      * @return sum of squared errors associated with the regression model\n      */\n     public double getSumSquaredErrors() {\n-        return sumYY - sumXY * sumXY / sumXX;\n+        return Math.max(0d, sumYY - sumXY * sumXY / sumXX);\n     }\n \n     /**\n",
      "operations": [
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8097,8100]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The sum is computed using the computational formula [8108,8159]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8167,8170]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003eSSE \u003d SYY - (SXY * SXY / SXX)\u003c/code\u003e [8178,8220]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: where \u003ccode\u003eSYY\u003c/code\u003e is the sum of the squared deviations of the y [8239,8307]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: values about their mean, \u003ccode\u003eSXX\u003c/code\u003e is similarly defined and [8315,8381]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003ccode\u003eSXY\u003c/code\u003e is the sum of the products of x and y mean deviations. [8389,8460]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8468,8471]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The sums are accumulated using the updating algorithm referenced in  [8479,8547]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "TagElement [8555,8571]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: .   [8571,8574]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8582,8585]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: The return value is constrained to be non-negative - i.e., if due to  [8593,8662]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: rounding errors the computational formula returns a negative result,  [8670,8739]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: 0 is returned. [8747,8761]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "TextElement: \u003cp\u003e [8769,8772]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "MethodInvocation [9225,9268]"
        },
        {
          "type": "insert-tree",
          "from": "",
          "to": "METHOD_INVOCATION_RECEIVER [9225,9229]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "SimpleName: max [9230,9233]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "METHOD_INVOCATION_ARGUMENTS [9234,9267]"
        },
        {
          "type": "insert-node",
          "from": "",
          "to": "NumberLiteral: 0d [9234,9236]"
        },
        {
          "type": "move-tree",
          "from": "",
          "to": ""
        }
      ]
    }
  ],
  "fixing_type": {
    "add_classes": {
      "qualified_names": [],
      "num": 0
    },
    "delete_classes": {
      "qualified_names": [],
      "num": 0
    },
    "add_functions": {
      "qualified_names": [],
      "num": 0
    },
    "delete_functions": {
      "qualified_names": [],
      "num": 0
    }
  },
  "patch_changed_mths": {
    "qualified_names": [
      "org.apache.commons.math.stat.regression.SimpleRegression:getSumSquaredErrors()D:regression"
    ],
    "num": 1
  }
}