diff -u -r tmp/changesInfo/Math_28/properties/modified_classes/inducing/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java tmp/changesInfo/Math_28/cleaned/fixing/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java
--- tmp/changesInfo/Math_28/properties/modified_classes/inducing/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2023-06-20 22:22:03.643226321 +0800
+++ tmp/changesInfo/Math_28/cleaned/fixing/src/main/java/org/apache/commons/math3/optimization/linear/SimplexSolver.java	2023-06-20 22:25:59.156486976 +0800
@@ -116,12 +116,14 @@
             // there's a degeneracy as indicated by a tie in the minimum ratio test
 
             // 1. check if there's an artificial variable that can be forced out of the basis
-            for (Integer row : minRatioPositions) {
-                for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
-                    int column = i + tableau.getArtificialVariableOffset();
-                    final double entry = tableau.getEntry(row, column);
-                    if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
-                        return row;
+            if (tableau.getNumArtificialVariables() > 0) {
+                for (Integer row : minRatioPositions) {
+                    for (int i = 0; i < tableau.getNumArtificialVariables(); i++) {
+                        int column = i + tableau.getArtificialVariableOffset();
+                        final double entry = tableau.getEntry(row, column);
+                        if (Precision.equals(entry, 1d, maxUlps) && row.equals(tableau.getBasicRow(column))) {
+                            return row;
+                        }
                     }
                 }
             }
@@ -131,20 +133,22 @@
             //
             // see http://www.stanford.edu/class/msande310/blandrule.pdf
             // see http://en.wikipedia.org/wiki/Bland%27s_rule (not equivalent to the above paper)
-            Integer minRow = null;
-            int minIndex = tableau.getWidth();
-            for (Integer row : minRatioPositions) {
-                for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1 && minRow != row; i++) {
-                    if (row == tableau.getBasicRow(i)) {
-                        if (i < minIndex) {
-                            minIndex = i;
-                            minRow = row;
+            if (getIterations() < getMaxIterations() / 2) {
+                Integer minRow = null;
+                int minIndex = tableau.getWidth();
+                for (Integer row : minRatioPositions) {
+                    for (int i = tableau.getNumObjectiveFunctions(); i < tableau.getWidth() - 1 && minRow != row; i++) {
+                        if (row == tableau.getBasicRow(i)) {
+                            if (i < minIndex) {
+                                minIndex = i;
+                                minRow = row;
+                            }
                         }
                     }
                 }
-            }
 
-            return minRow;
+                return minRow;
+            }
         }
         return minRatioPositions.get(0);
     }
Only in tmp/changesInfo/Math_28/properties/modified_classes/inducing/src: test
