package root.attempt;

import org.eclipse.jgit.lib.Repository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import root.benchmarks.Defects4JBug;
import root.util.FileUtils;
import root.util.GitAccess;

import java.io.File;
import java.util.Map;

public class Main implements GitAccess {

    static Logger logger = LoggerFactory.getLogger(Main.class);

    public static void main(String[] args){
        /*
         [todo] make sure the commit('before-inducing commit') before bug-inducing commit has passed all test cases while bug-inducing commit has failed.
            1. switch to the original repository to get the before-inducing commit.
            2. move test cases to the before-inducing commit.
            3. check its precision.
         */
        String tagName = "CI_INDUCING_COMPILABLE";
        Defects4JBug defects4JBug = new Defects4JBug("Lang", "65", "tmp/bugs/Lang_65_buggy" + "");///home/liumengjiao/Desktop/Closure10
//        defects4JBug.writeD4JFiles("buggy");
        boolean res = switchAndTag(defects4JBug, defects4JBug.getGitRepository("buggy"), "6ca47c0ad42782e0db169df8c7923a5b6736bcb3", "buggy", tagName);
//        if (res) {
//            logger.info("Commit Changes to get a " + "fixing" + " version...");
//            res = defects4JBug.commitChangesAndTag(tagName);
//            res &= defects4JBug.test();
//        }

    }
    public static boolean switchAndTag(Defects4JBug defects4JBug, Repository repository, String commitId, String version, String tagName) {
        boolean res = false;
        try {
            logger.info("Switch to commit " + commitId);
            gitAccess.checkout(repository, commitId);
            //todo: build.properties need to map to correct package!!!
            logger.info("Output defects4j properties and config file...");
            res = defects4JBug.writeD4JFiles(version);
            res = defects4JBug.test();

            logger.info("Checking build.xml file...");
            if (FileUtils.notExists(defects4JBug.getWorkingDir() + "/build.xml") && !FileUtils.notExists(defects4JBug.getWorkingDir() + "/pom.xml")) {
                FileUtils.executeCommand(new String[]{"mvn", "ant:ant"}, defects4JBug.getWorkingDir(), 300, null);
                logger.info("build.xml file has been generated by `mvn ant:ant`.");
            }

            String all_tests = "tmp/changesInfo/" + defects4JBug.getProj() + "_" + defects4JBug.getId() + "/properties/all_tests/" + version;
            String failing_tests = "tmp/changesInfo/" + defects4JBug.getProj() + "_" + defects4JBug.getId() + "/properties/failing_tests/" + version;
//            if (FileUtils.notExists(failing_tests)) {
//                if (FileUtils.notExists(all_tests)) {
//                    logger.info("Execute original tests...");
//                    logger.info("Writing all_tests info...");
//                    res &= defects4JBug.test();
//                    if (res)
//                        FileUtils.copy(new File(defects4JBug.getWorkingDir() + "/all_tests"), new File(all_tests));
//                }
//                if (res) {
//                    logger.info("Writing failing_tests info...");
//                    FileUtils.copy(new File(defects4JBug.getWorkingDir() + "/failing_tests"), new File(failing_tests));
//                }
//            }

            logger.info("git int ...");
            res &= gitAccess.init(defects4JBug.getWorkingDir(), 300);

            Map<String, String> properties = defects4JBug.getProperties("/defects4j.build.properties");
            logger.info("Read failing tests and Exclude flaky/broken tests...");
            defects4JBug.rmBrokenTests(failing_tests, defects4JBug.getWorkingDir() + "/" + properties.get("test.dir"));
        } catch (Exception e) {
            logger.error(e.getMessage());
            res = false;
        }
        return res;
    }
}
