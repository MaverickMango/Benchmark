package root.entity;

import org.eclipse.jgit.lib.Repository;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;
import root.entity.benchmarks.Defects4JBug;
import root.entity.ci.CIBug;
import root.generation.entity.Patch;
import root.util.ConfigurationProperties;
import root.util.FileUtils;
import root.util.GitAccess;

import java.io.File;
import java.util.List;

public class BugRepository implements GitAccess {

    private final Logger logger = LoggerFactory.getLogger(BugRepository.class);
    CIBug bug;
    Repository repository;

    public BugRepository(Defects4JBug bug) {
        this.bug = bug;
        bug.setBugName(bug.getProj() + "_" + bug.getId());
        this.repository = bug.getGitRepository();
        this.bug.compile();
    }

    public Repository getRepository() {
        return repository;
    }

    public CIBug getBug() {
        return bug;
    }

    public boolean test(String testName) {
        boolean res = false;
        if (!(bug instanceof Defects4JBug))
            return res;
        Defects4JBug defects4JBug = (Defects4JBug) bug;
        res = defects4JBug.specifiedTest(testName);
        return res;
    }

    public List<String> testWithRes(String testName) {
        List<String> res = null;
        if (!(bug instanceof Defects4JBug))
            return res;
        Defects4JBug defects4JBug = (Defects4JBug) bug;
        res = defects4JBug.specifiedTestWithRes(testName);
        return res;
    }

    public boolean switchToBug() {
        boolean res = false;
        if (!(bug instanceof Defects4JBug))
            return res;
        Defects4JBug defects4JBug = (Defects4JBug) bug;
        try {
            logger.debug("Switch to commit " + defects4JBug.getD4JBuggy());
            res = gitAccess.checkoutf(defects4JBug.getWorkingDir(), defects4JBug.getD4JBuggy());
        } catch (Exception e) {
            logger.error(e.getMessage());
        }
        return res;
    }

    public boolean switchToOrg() {
        boolean res = false;
        if (!(bug instanceof Defects4JBug))
            return res;
        Defects4JBug defects4JBug = (Defects4JBug) bug;
        try {
            logger.debug("Switch to commit " + defects4JBug.getOriginalCommit());
            gitAccess.checkoutf(defects4JBug.getWorkingDir(), defects4JBug.getOriginalCommit());
            //todo: build.properties need to map to correct package?
            logger.debug("Output defects4j properties and config file...");
            res = defects4JBug.writeD4JFiles("b");

            logger.debug("Checking build.xml file...");
            String buildfiles = defects4JBug.getDataDir() + "/buildfiles";
            if (!FileUtils.notExists(buildfiles)) {
                FileUtils.copy(new File(buildfiles), new File(defects4JBug.getWorkingDir()));
            } else {
                String buildFilePath = ConfigurationProperties.getProperty("defects4j") +
                        "/framework/projects/" + defects4JBug.getProj() + "/build_files/" + defects4JBug.getFixingCommit();
                File buildFile = new File(buildFilePath);
                if (buildFile.exists()) {
                    logger.info("---------- copy build files from defects4j from " + buildFilePath);
                    FileUtils.copy(buildFile, new File(defects4JBug.getWorkingDir()));
                }
                if (FileUtils.notExists(defects4JBug.getWorkingDir() + "/build.xml")
                        && !FileUtils.notExists(defects4JBug.getWorkingDir() + "/pom.xml")) {
                    FileUtils.executeCommand(new String[]{"mvn", "ant:ant"}, defects4JBug.getWorkingDir(), 300, null);
                    logger.debug("build.xml file has been generated by `mvn ant:ant`.");
                }
            }
//            res &= defects4JBug.compile();

            logger.info("Induce trigger tests and test...");
            String triggerTests = new File(defects4JBug.getDataDir() +
                    defects4JBug.getProj() + "_" + defects4JBug.getId() + "/cleaned/inducing/*").getAbsolutePath();
            FileUtils.executeCommand(new String[]{"/bin/bash", "-c", "cp -r " + triggerTests + " ./"},
                    defects4JBug.getWorkingDir(), 300, null);
//            res &= defects4JBug.test();

            gitAccess.init(defects4JBug.getWorkingDir(), 300);

        } catch (Exception e) {
            logger.error(e.getMessage());
            res = false;
        }
        return res;
    }

    public boolean applyPatch(Patch patch) {
        boolean res = switchToBug();
        if (!res) {
            logger.error("Error occurred when switching " + bug.getBugName() + " to buggy version!");
            return res;
        }
        //todo another better way to apply patch???
        String patchDir = ConfigurationProperties.getProperty("patchDir") + File.separator;
        String[] cmd = new String[]{"/bin/bash", "-c", "cp -r "+ patch.getPathFromRoot() + File.separator + "* " + patchDir};
        int r = FileUtils.executeCommand(cmd, null, 300, null);
        return r == 0;
    }
}
