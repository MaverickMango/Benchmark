diff -r -u original/src/com/google/javascript/jscomp/CollapseProperties.java buggy/src/com/google/javascript/jscomp/CollapseProperties.java
--- original/src/com/google/javascript/jscomp/CollapseProperties.java	2023-06-13 15:31:48.911128217 +0800
+++ buggy/src/com/google/javascript/jscomp/CollapseProperties.java	2023-06-12 11:40:33.478394264 +0800
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.base.Predicates;
+import com.google.common.collect.Iterables;
 import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.GlobalNamespace.Name;
@@ -27,6 +28,7 @@
 import com.google.javascript.jscomp.ReferenceCollectingCallback.ReferenceCollection;
 import com.google.javascript.jscomp.Scope;
 import com.google.javascript.jscomp.Scope.Var;
+import com.google.javascript.rhino.IR;
 import com.google.javascript.rhino.JSDocInfo;
 import com.google.javascript.rhino.Node;
 import com.google.javascript.rhino.Token;
@@ -130,14 +132,14 @@
     checkNamespaces();
 
     for (Name n : globalNames) {
-      flattenReferencesToCollapsibleDescendantNames(n, n.name);
+      flattenReferencesToCollapsibleDescendantNames(n, n.getBaseName());
     }
 
     // We collapse property definitions after collapsing property references
     // because this step can alter the parse tree above property references,
     // invalidating the node ancestry stored with each reference.
     for (Name n : globalNames) {
-      collapseDeclarationOfNameAndDescendants(n, n.name);
+      collapseDeclarationOfNameAndDescendants(n, n.getBaseName());
     }
   }
 
@@ -171,7 +173,7 @@
           name.aliasingGets > 0) {
         // {@code name} meets condition (b). Find all of its local aliases
         // and try to inline them.
-        List<Ref> refs = Lists.newArrayList(name.refs);
+        List<Ref> refs = Lists.newArrayList(name.getRefs());
         for (Ref ref : refs) {
           if (ref.type == Type.ALIASING_GET && ref.scope.isLocal()) {
             // {@code name} meets condition (c). Try to inline it.
@@ -200,7 +202,7 @@
     // then the NAME must be the child of a VAR node, and we must
     // be in a VAR assignment.
     Node aliasParent = alias.node.getParent();
-    if (aliasParent.getType() == Token.NAME) {
+    if (aliasParent.isName()) {
       // Ensure that the local variable is well defined and never reassigned.
       Scope scope = alias.scope;
       Var aliasVar = scope.getVar(aliasParent.getString());
@@ -210,8 +212,7 @@
               Predicates.<Var>equalTo(aliasVar));
       (new NodeTraversal(compiler, collector)).traverseAtScope(scope);
 
-      ReferenceCollection aliasRefs =
-          collector.getReferenceCollection(aliasVar);
+      ReferenceCollection aliasRefs = collector.getReferences(aliasVar);
       if (aliasRefs.isWellDefined()
           && aliasRefs.firstReferenceIsAssigningDeclaration()
           && aliasRefs.isAssignedOnceInLifetime()) {
@@ -223,16 +224,16 @@
               aliasRefs.references.get(i);
 
           Node newNode = alias.node.cloneTree();
-          aliasRef.getParent().replaceChild(aliasRef.getNameNode(), newNode);
+          aliasRef.getParent().replaceChild(aliasRef.getNode(), newNode);
           newNodes.add(newNode);
         }
 
         // just set the original alias to null.
-        aliasParent.replaceChild(alias.node, new Node(Token.NULL));
+        aliasParent.replaceChild(alias.node, IR.nullNode());
         compiler.reportCodeChange();
 
         // Inlining the variable may have introduced new references
-        // to descendents of {@code name}. So those need to be collected now.
+        // to descendants of {@code name}. So those need to be collected now.
         namespace.scanNewNodes(alias.scope, newNodes);
         return true;
       }
@@ -247,11 +248,21 @@
    */
   private void checkNamespaces() {
     for (Name name : nameMap.values()) {
-      if (name.isNamespace() && name.refs != null &&
-          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1)) {
-        boolean initialized = name.declaration != null;
-        for (Ref ref : name.refs) {
-          if (ref.type == Ref.Type.SET_FROM_GLOBAL ||
+      if (name.isNamespace() &&
+          (name.aliasingGets > 0 || name.localSets + name.globalSets > 1 ||
+           name.deleteProps > 0)) {
+        boolean initialized = name.getDeclaration() != null;
+        for (Ref ref : name.getRefs()) {
+          if (ref == name.getDeclaration()) {
+            continue;
+          }
+
+          if (ref.type == Ref.Type.DELETE_PROP) {
+            if (initialized) {
+              warnAboutNamespaceRedefinition(name, ref);
+            }
+          } else if (
+              ref.type == Ref.Type.SET_FROM_GLOBAL ||
               ref.type == Ref.Type.SET_FROM_LOCAL) {
             if (initialized) {
               warnAboutNamespaceRedefinition(name, ref);
@@ -274,8 +285,8 @@
    */
   private void warnAboutNamespaceAliasing(Name nameObj, Ref ref) {
     compiler.report(
-        JSError.make(ref.sourceName, ref.node,
-                     UNSAFE_NAMESPACE_WARNING, nameObj.fullName()));
+        JSError.make(ref.getSourceName(), ref.node,
+                     UNSAFE_NAMESPACE_WARNING, nameObj.getFullName()));
   }
 
   /**
@@ -286,8 +297,8 @@
    */
   private void warnAboutNamespaceRedefinition(Name nameObj, Ref ref) {
     compiler.report(
-        JSError.make(ref.sourceName, ref.node,
-                     NAMESPACE_REDEFINED_WARNING, nameObj.fullName()));
+        JSError.make(ref.getSourceName(), ref.node,
+                     NAMESPACE_REDEFINED_WARNING, nameObj.getFullName()));
   }
 
   /**
@@ -302,16 +313,39 @@
     if (n.props == null) return;
 
     for (Name p : n.props) {
-      String propAlias = appendPropForAlias(alias, p.name);
+      String propAlias = appendPropForAlias(alias, p.getBaseName());
 
       if (p.canCollapse()) {
         flattenReferencesTo(p, propAlias);
+      } else if (p.isSimpleStubDeclaration()) {
+        flattenSimpleStubDeclaration(p, propAlias);
       }
 
       flattenReferencesToCollapsibleDescendantNames(p, propAlias);
     }
   }
 
+
+  /**
+   * Flattens a stub declaration.
+   * This is mostly a hack to support legacy users.
+   */
+  private void flattenSimpleStubDeclaration(Name name, String alias) {
+    Ref ref = Iterables.getOnlyElement(name.getRefs());
+    Node nameNode = NodeUtil.newName(
+        compiler.getCodingConvention(), alias, ref.node,
+        name.getFullName());
+    Node varNode = IR.var(nameNode).copyInformationFrom(nameNode);
+
+    Preconditions.checkState(
+        ref.node.getParent().isExprResult());
+    Node parent = ref.node.getParent();
+    Node gramps = parent.getParent();
+    gramps.replaceChild(parent, varNode);
+    compiler.reportCodeChange();
+  }
+
+
   /**
    * Flattens all references to a collapsible property of a global name except
    * its initial definition.
@@ -320,20 +354,23 @@
    * @param alias The flattened name (e.g. "a$b" or "a$b$c$d")
    */
   private void flattenReferencesTo(Name n, String alias) {
-    if (n.refs != null) {
-      String originalName = n.fullName();
-      for (Ref r : n.refs) {
-        Node rParent = r.node.getParent();
-
-        // There are two cases when we shouldn't flatten a reference:
-        // 1) Object literal keys, because duplicate keys show up as refs.
-        // 2) References inside a complex assign. (a = x.y = 0). These are
-        //    called TWIN references, because they show up twice in the
-        //    reference list. Only collapse the set, not the alias.
-        if (!NodeUtil.isObjectLitKey(r.node, rParent) &&
-            (r.getTwin() == null || r.isSet())) {
-          flattenNameRef(alias, r.node, rParent, originalName);
-        }
+    String originalName = n.getFullName();
+    for (Ref r : n.getRefs()) {
+      if (r == n.getDeclaration()) {
+        // Declarations are handled separately.
+        continue;
+      }
+
+      Node rParent = r.node.getParent();
+
+      // There are two cases when we shouldn't flatten a reference:
+      // 1) Object literal keys, because duplicate keys show up as refs.
+      // 2) References inside a complex assign. (a = x.y = 0). These are
+      //    called TWIN references, because they show up twice in the
+      //    reference list. Only collapse the set, not the alias.
+      if (!NodeUtil.isObjectLitKey(r.node) &&
+          (r.getTwin() == null || r.isSet())) {
+        flattenNameRef(alias, r.node, rParent, originalName);
       }
     }
 
@@ -359,20 +396,23 @@
   private void flattenPrefixes(String alias, Name n, int depth) {
     // Only flatten the prefix of a name declaration if the name being
     // initialized is fully qualified (i.e. not an object literal key).
-    String originalName = n.fullName();
-    if (n.declaration != null && n.declaration.node != null &&
-        n.declaration.node.getType() == Token.GETPROP) {
-      flattenNameRefAtDepth(alias, n.declaration.node, depth, originalName);
+    String originalName = n.getFullName();
+    Ref decl = n.getDeclaration();
+    if (decl != null && decl.node != null &&
+        decl.node.isGetProp()) {
+      flattenNameRefAtDepth(alias, decl.node, depth, originalName);
     }
 
-    if (n.refs != null) {
-      for (Ref r : n.refs) {
-
-        // References inside a complex assign (a = x.y = 0)
-        // have twins. We should only flatten one of the twins.
-        if (r.getTwin() == null || r.isSet()) {
-          flattenNameRefAtDepth(alias, r.node, depth, originalName);
-        }
+    for (Ref r : n.getRefs()) {
+      if (r == decl) {
+        // Declarations are handled separately.
+        continue;
+      }
+
+      // References inside a complex assign (a = x.y = 0)
+      // have twins. We should only flatten one of the twins.
+      if (r.getTwin() == null || r.isSet()) {
+        flattenNameRefAtDepth(alias, r.node, depth, originalName);
       }
     }
 
@@ -399,7 +439,7 @@
     // proceeding. In the OBJLIT case, we don't need to do anything.
     int nType = n.getType();
     boolean isQName = nType == Token.NAME || nType == Token.GETPROP;
-    boolean isObjKey = NodeUtil.isObjectLitKey(n, n.getParent());
+    boolean isObjKey = NodeUtil.isObjectLitKey(n);
     Preconditions.checkState(isObjKey || isQName);
     if (isQName) {
       for (int i = 1; i < depth && n.hasChildren(); i++) {
@@ -432,6 +472,12 @@
     Node ref = NodeUtil.newName(
         compiler.getCodingConvention(), alias, n, originalName);
     NodeUtil.copyNameAnnotations(n.getLastChild(), ref);
+    if (parent.isCall() && n == parent.getFirstChild()) {
+      // The node was a call target, we are deliberately flatten these as
+      // we node the "this" isn't provided by the namespace. Mark it as such:
+      parent.putBooleanProp(Node.FREE_CALL, true);
+    }
+
     JSType type = n.getJSType();
     if (type != null) {
       ref.setJSType(type);
@@ -460,14 +506,16 @@
       for (Name p : n.props) {
         // Recurse first so that saved node ancestries are intact when needed.
         collapseDeclarationOfNameAndDescendants(
-            p, appendPropForAlias(alias, p.name));
+            p, appendPropForAlias(alias, p.getBaseName()));
 
-        if (!p.inExterns && canCollapseChildNames && p.declaration != null &&
-            p.declaration.node != null &&
-            p.declaration.node.getParent() != null &&
-            p.declaration.node.getParent().getType() == Token.ASSIGN) {
+        if (!p.inExterns && canCollapseChildNames &&
+            p.getDeclaration() != null &&
+            p.canCollapse() &&
+            p.getDeclaration().node != null &&
+            p.getDeclaration().node.getParent() != null &&
+            p.getDeclaration().node.getParent().isAssign()) {
           updateSimpleDeclaration(
-              appendPropForAlias(alias, p.name), p, p.declaration);
+              appendPropForAlias(alias, p.getBaseName()), p, p.getDeclaration());
         }
       }
     }
@@ -489,19 +537,18 @@
     Node parent = ref.node.getParent();
     Node gramps = parent.getParent();
     Node greatGramps = gramps.getParent();
-    Node greatGreatGramps = greatGramps.getParent();
 
-    if (rvalue != null && rvalue.getType() == Token.FUNCTION) {
+    if (rvalue != null && rvalue.isFunction()) {
       checkForHosedThisReferences(rvalue, refName.docInfo, refName);
     }
 
     // Create the new alias node.
     Node nameNode = NodeUtil.newName(
         compiler.getCodingConvention(), alias, gramps.getFirstChild(),
-        refName.fullName());
+        refName.getFullName());
     NodeUtil.copyNameAnnotations(ref.node.getLastChild(), nameNode);
 
-    if (gramps.getType() == Token.EXPR_RESULT) {
+    if (gramps.isExprResult()) {
       // BEFORE: a.b.c = ...;
       //   exprstmt
       //     assign
@@ -516,11 +563,11 @@
       //     name a$b$c
       //       NODE
 
-      // Remove the rvalue (NODE).
+      // Remove the r-value (NODE).
       parent.removeChild(rvalue);
       nameNode.addChildToFront(rvalue);
 
-      Node varNode = new Node(Token.VAR, nameNode);
+      Node varNode = IR.var(nameNode);
       greatGramps.replaceChild(gramps, varNode);
     } else {
       // This must be a complex assignment.
@@ -535,14 +582,14 @@
 
       Node current = gramps;
       Node currentParent = gramps.getParent();
-      for (; currentParent.getType() != Token.SCRIPT &&
-             currentParent.getType() != Token.BLOCK;
+      for (; !currentParent.isScript() &&
+             !currentParent.isBlock();
            current = currentParent,
            currentParent = currentParent.getParent()) {}
 
       // Create a stub variable declaration right
       // before the current statement.
-      Node stubVar = new Node(Token.VAR, nameNode.cloneTree())
+      Node stubVar = IR.var(nameNode.cloneTree())
           .copyInformationFrom(nameNode);
       currentParent.addChildBefore(stubVar, current);
 
@@ -573,19 +620,20 @@
    */
   private void updateObjLitOrFunctionDeclaration(
       Name n, String alias, boolean canCollapseChildNames) {
-    if (n.declaration == null) {
+    Ref decl = n.getDeclaration();
+    if (decl == null) {
       // Some names do not have declarations, because they
       // are only defined in local scopes.
       return;
     }
 
-    if (n.declaration.getTwin() != null) {
+    if (decl.getTwin() != null) {
       // Twin declarations will get handled when normal references
       // are handled.
       return;
     }
 
-    switch (n.declaration.node.getParent().getType()) {
+    switch (decl.node.getParent().getType()) {
       case Token.ASSIGN:
         updateObjLitOrFunctionDeclarationAtAssignNode(
             n, alias, canCollapseChildNames);
@@ -613,12 +661,12 @@
     // (e.g. a var node before the exprstmt) because the exprstmt might be
     // the child of an if statement that's not inside a block).
 
-    Ref ref = n.declaration;
+    Ref ref = n.getDeclaration();
     Node rvalue = ref.node.getNext();
     Node varNode = new Node(Token.VAR);
     Node varParent = ref.node.getAncestor(3);
     Node gramps = ref.node.getAncestor(2);
-    boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
+    boolean isObjLit = rvalue.isObjectLit();
     boolean insertedVarNode = false;
 
     if (isObjLit && n.canEliminate()) {
@@ -629,7 +677,7 @@
 
     } else if (!n.isSimpleName()) {
       // Create a VAR node to declare the name.
-      if (rvalue.getType() == Token.FUNCTION) {
+      if (rvalue.isFunction()) {
         checkForHosedThisReferences(rvalue, n.docInfo, n);
       }
 
@@ -637,12 +685,17 @@
 
       Node nameNode = NodeUtil.newName(
           compiler.getCodingConvention(),
-          alias, ref.node.getAncestor(2), n.fullName());
+          alias, ref.node.getAncestor(2), n.getFullName());
 
-      if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME)) {
+      JSDocInfo info = ref.node.getParent().getJSDocInfo();
+      if (ref.node.getLastChild().getBooleanProp(Node.IS_CONSTANT_NAME) ||
+          (info != null && info.isConstant())) {
         nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
       }
 
+      if (info != null) {
+        varNode.setJSDocInfo(info);
+      }
       varNode.addChildToBack(nameNode);
       nameNode.addChildToFront(rvalue);
       varParent.replaceChild(gramps, varNode);
@@ -682,11 +735,12 @@
         (!docInfo.isConstructor() && !docInfo.hasThisType())) {
       NodeTraversal.traverse(compiler, function.getLastChild(),
           new NodeTraversal.AbstractShallowCallback() {
+            @Override
             public void visit(NodeTraversal t, Node n, Node parent) {
-              if (n.getType() == Token.THIS) {
+              if (n.isThis()) {
                 compiler.report(
-                    JSError.make(name.declaration.sourceName, n,
-                        UNSAFE_THIS, name.fullName()));
+                    JSError.make(name.getDeclaration().getSourceName(), n,
+                        UNSAFE_THIS, name.getFullName()));
               }
             }
           });
@@ -706,13 +760,13 @@
       return;
     }
 
-    Ref ref = n.declaration;
+    Ref ref = n.getDeclaration();
     String name = ref.node.getString();
     Node rvalue = ref.node.getFirstChild();
     Node varNode = ref.node.getParent();
     Node gramps = varNode.getParent();
 
-    boolean isObjLit = rvalue.getType() == Token.OBJECTLIT;
+    boolean isObjLit = rvalue.isObjectLit();
     int numChanges = 0;
 
     if (isObjLit) {
@@ -753,7 +807,7 @@
       return;
     }
 
-    Ref ref = n.declaration;
+    Ref ref = n.getDeclaration();
     String fnName = ref.node.getString();
     addStubsForUndeclaredProperties(
         n, fnName, ref.node.getAncestor(2), ref.node.getParent());
@@ -785,7 +839,7 @@
       nextKey = key.getNext();
 
       // A get or a set can not be rewritten as a VAR.
-      if (key.getType() == Token.GET || key.getType() == Token.SET) {
+      if (key.isGetterDef() || key.isSetterDef()) {
         continue;
       }
 
@@ -794,20 +848,26 @@
       // this object literal's child names wouldn't be collapsible.) The only
       // reason that we don't eliminate them entirely is the off chance that
       // their values are expressions that have side effects.
-      boolean isJsIdentifier = key.getType() != Token.NUMBER &&
+      boolean isJsIdentifier = !key.isNumber() &&
                                TokenStream.isJSIdentifier(key.getString());
       String propName = isJsIdentifier ?
           key.getString() : String.valueOf(++arbitraryNameCounter);
-      String propAlias = appendPropForAlias(alias, propName);
-      String qName = objlitName.fullName() + '.' + propName;
 
+      // If the name cannot be collapsed, skip it.
+      String qName = objlitName.getFullName() + '.' + propName;
+      Name p = nameMap.get(qName);
+      if (p != null && !p.canCollapse()) {
+        continue;
+      }
+
+      String propAlias = appendPropForAlias(alias, propName);
       Node refNode = null;
       if (discardKeys) {
         objlit.removeChild(key);
         value.detachFromParent();
       } else {
         // Substitute a reference for the value.
-        refNode = Node.newString(Token.NAME, propAlias);
+        refNode = IR.name(propAlias);
         if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
           refNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
         }
@@ -816,12 +876,12 @@
       }
 
       // Declare the collapsed name as a variable with the original value.
-      Node nameNode = Node.newString(Token.NAME, propAlias);
+      Node nameNode = IR.name(propAlias);
       nameNode.addChildToFront(value);
       if (key.getBooleanProp(Node.IS_CONSTANT_NAME)) {
         nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
       }
-      Node newVar = new Node(Token.VAR, nameNode)
+      Node newVar = IR.var(nameNode)
           .copyInformationFromForTree(key);
       if (nameToAddAfter != null) {
         varParent.addChildAfter(newVar, nameToAddAfter);
@@ -831,24 +891,21 @@
       compiler.reportCodeChange();
       nameToAddAfter = newVar;
 
-      if (isJsIdentifier) {
-        // Update the global name's node ancestry if it hasn't already been
-        // done. (Duplicate keys in an object literal can bring us here twice
-        // for the same global name.)
-        Name p = nameMap.get(qName);
-        if (p != null) {
-          if (!discardKeys) {
-            Ref newAlias =
-                p.declaration.cloneAndReclassify(Ref.Type.ALIASING_GET);
-            newAlias.node = refNode;
-            p.addRef(newAlias);
-          }
+      // Update the global name's node ancestry if it hasn't already been
+      // done. (Duplicate keys in an object literal can bring us here twice
+      // for the same global name.)
+      if (isJsIdentifier && p != null) {
+        if (!discardKeys) {
+          Ref newAlias =
+              p.getDeclaration().cloneAndReclassify(Ref.Type.ALIASING_GET);
+          newAlias.node = refNode;
+          p.addRef(newAlias);
+        }
 
-          p.declaration.node = nameNode;
+        p.getDeclaration().node = nameNode;
 
-          if (value.getType() == Token.FUNCTION) {
-            checkForHosedThisReferences(value, value.getJSDocInfo(), p);
-          }
+        if (value.isFunction()) {
+          checkForHosedThisReferences(value, value.getJSDocInfo(), p);
         }
       }
 
@@ -879,9 +936,9 @@
     if (n.props != null) {
       for (Name p : n.props) {
         if (p.needsToBeStubbed()) {
-          String propAlias = appendPropForAlias(alias, p.name);
-          Node nameNode = Node.newString(Token.NAME, propAlias);
-          Node newVar = new Node(Token.VAR, nameNode)
+          String propAlias = appendPropForAlias(alias, p.getBaseName());
+          Node nameNode = IR.name(propAlias);
+          Node newVar = IR.var(nameNode)
               .copyInformationFromForTree(addAfter);
           parent.addChildAfter(newVar, addAfter);
           addAfter = newVar;
@@ -890,8 +947,8 @@
 
           // Determine if this is a constant var by checking the first
           // reference to it. Don't check the declaration, as it might be null.
-          if (p.refs.get(0).node.getLastChild().getBooleanProp(
-                Node.IS_CONSTANT_NAME)) {
+          if (p.getRefs().get(0).node.getLastChild().getBooleanProp(
+                  Node.IS_CONSTANT_NAME)) {
             nameNode.putBooleanProp(Node.IS_CONSTANT_NAME, true);
           }
         }
@@ -905,7 +962,7 @@
       // Encode '$' in a property as '$0'. Because '0' cannot be the
       // start of an identifier, this will never conflict with our
       // encoding from '.' -> '$'.
-      prop = prop.replaceAll("\\$", "\\$0");
+      prop = prop.replace("$", "$0");
     }
     return root + '$' + prop;
   }
diff -r -u original/test/com/google/javascript/jscomp/CollapsePropertiesTest.java buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java
--- original/test/com/google/javascript/jscomp/CollapsePropertiesTest.java	2023-06-13 15:31:48.911128217 +0800
+++ buggy/test/com/google/javascript/jscomp/CollapsePropertiesTest.java	2023-06-12 11:40:33.482394083 +0800
@@ -18,6 +18,8 @@
 
 import static com.google.javascript.jscomp.CollapseProperties.UNSAFE_THIS;
 
+import com.google.javascript.rhino.Node;
+
 /**
  * Tests for {@link CollapseProperties}.
  *
@@ -186,7 +188,7 @@
     // TODO(user): Make CollapseProperties even more aggressive so that
     // a$b.z gets collapsed. Right now, it doesn't get collapsed because the
     // expression (a.b && a.b.c) could return a.b. But since it returns a.b iff
-    // a.b *is* safely collapsible, the boolean logic should be smart enough to
+    // a.b *is* safely collapsible, the Boolean logic should be smart enough to
     // only consider the right side of the && as aliasing.
     test("var a = {}; a.b = {}; /** @constructor */ a.b.c = function(){};" +
          " a.b.z = 1; var d = a.b && a.b.c;",
@@ -762,7 +764,7 @@
   }
 
   public void testStaticFunctionReferencingThis1() {
-    // Note: Google's Javascript Style Guide says to avoid using the 'this'
+    // Note: Google's JavaScript Style Guide says to avoid using the 'this'
     // keyword in a static function.
     test("var a = {}; a.b = function() {this.c}; var d = a.b;",
          "var a$b = function() {this.c}; var d = a$b;", null, UNSAFE_THIS);
@@ -928,8 +930,8 @@
 
   public void testPropertiesOnBothSidesOfAssignment() {
     // This verifies that replacements are done in the right order. Collapsing
-    // the lvalue in an assignment affects the parse tree immediately above
-    // the rvalue, so we update all rvalues before any lvalues.
+    // the l-value in an assignment affects the parse tree immediately above
+    // the r-value, so we update all rvalues before any lvalues.
     test("var a = {b: 0}; a.c = a.b;", "var a$b = 0; var a$c = a$b;");
   }
 
@@ -1053,6 +1055,15 @@
          "var b$c = x; function f() { var a = null; b$c(); }");
   }
 
+  public void testInlineAliasWithModifications() {
+    testSame("var x = 10; function f() { var y = x; x++; alert(y)} ");
+    testSame("var x = 10; function f() { var y = x; x+=1; alert(y)} ");
+    test("var x = {}; x.x = 10; function f() {var y=x.x; x.x++; alert(y)}",
+         "var x$x = 10; function f() {var y=x$x; x$x++; alert(y)}");
+    test("var x = {}; x.x = 10; function f() {var y=x.x; x.x+=1; alert(y)}",
+         "var x$x = 10; function f() {var y=x$x; x$x+=1; alert(y)}");
+  }
+
   public void testCollapsePropertyOnExternType() {
     collapsePropertiesOnExternTypes = true;
     test("String.myFunc = function() {}; String.myFunc();",
@@ -1267,6 +1278,11 @@
          "function Map() {} var Map$foo = 3; Map;");
   }
 
+  public void testPropertyOnGlobalInterface() {
+    test("/** @interface */ function Map() {} Map.foo = 3; Map;",
+         "function Map() {} var Map$foo = 3; Map;");
+  }
+
   public void testPropertyOnGlobalFunction() {
     testSame("function Map() {} Map.foo = 3; Map;");
   }
@@ -1341,4 +1357,135 @@
         "var a = null;" +
         "this.c = a.b;");
   }
+
+  public void testTypedef1() {
+    test("var foo = {};" +
+         "/** @typedef {number} */ foo.Baz;",
+         "var foo = {}; var foo$Baz;");
+  }
+
+  public void testTypedef2() {
+    test("var foo = {};" +
+         "/** @typedef {number} */ foo.Bar.Baz;" +
+         "foo.Bar = function() {};",
+         "var foo$Bar$Baz; var foo$Bar = function(){};");
+  }
+
+  public void testDelete1() {
+    testSame(
+        "var foo = {};" +
+        "foo.bar = 3;" +
+        "delete foo.bar;");
+  }
+
+  public void testDelete2() {
+    test(
+        "var foo = {};" +
+        "foo.bar = 3;" +
+        "foo.baz = 3;" +
+        "delete foo.bar;",
+        "var foo = {};" +
+        "foo.bar = 3;" +
+        "var foo$baz = 3;" +
+        "delete foo.bar;");
+  }
+
+  public void testDelete3() {
+    testSame(
+        "var foo = {bar: 3};" +
+        "delete foo.bar;");
+  }
+
+  public void testDelete4() {
+    test(
+        "var foo = {bar: 3, baz: 3};" +
+        "delete foo.bar;",
+        "var foo$baz=3;var foo={bar:3};delete foo.bar");
+  }
+
+  public void testDelete5() {
+    test(
+        "var x = {};" +
+        "x.foo = {};" +
+        "x.foo.bar = 3;" +
+        "delete x.foo.bar;",
+        "var x$foo = {};" +
+        "x$foo.bar = 3;" +
+        "delete x$foo.bar;");
+  }
+
+  public void testDelete6() {
+    test(
+        "var x = {};" +
+        "x.foo = {};" +
+        "x.foo.bar = 3;" +
+        "x.foo.baz = 3;" +
+        "delete x.foo.bar;",
+        "var x$foo = {};" +
+        "x$foo.bar = 3;" +
+        "var x$foo$baz = 3;" +
+        "delete x$foo.bar;");
+  }
+
+  public void testDelete7() {
+    test(
+        "var x = {};" +
+        "x.foo = {bar: 3};" +
+        "delete x.foo.bar;",
+        "var x$foo = {bar: 3};" +
+        "delete x$foo.bar;");
+  }
+
+  public void testDelete8() {
+    test(
+        "var x = {};" +
+        "x.foo = {bar: 3, baz: 3};" +
+        "delete x.foo.bar;",
+        "var x$foo$baz = 3; var x$foo = {bar: 3};" +
+        "delete x$foo.bar;");
+  }
+
+  public void testDelete9() {
+    testSame(
+        "var x = {};" +
+        "x.foo = {};" +
+        "x.foo.bar = 3;" +
+        "delete x.foo;");
+  }
+
+  public void testDelete10() {
+    testSame(
+        "var x = {};" +
+        "x.foo = {bar: 3};" +
+        "delete x.foo;");
+  }
+
+  public void testDelete11() {
+    // Constructors are always collapsed.
+    test(
+        "var x = {};" +
+        "x.foo = {};" +
+        "/** @constructor */ x.foo.Bar = function() {};" +
+        "delete x.foo;",
+        "var x = {};" +
+        "x.foo = {};" +
+        "var x$foo$Bar = function() {};" +
+        "delete x.foo;",
+        null,
+        CollapseProperties.NAMESPACE_REDEFINED_WARNING);
+  }
+
+  public void testPreserveConstructorDoc() {
+    test("var foo = {};" +
+         "/** @constructor */\n" +
+         "foo.bar = function() {}",
+         "var foo$bar = function() {}");
+
+    Node root = getLastCompiler().getRoot();
+
+    Node fooBarNode = findQualifiedNameNode("foo$bar", root);
+    Node varNode = fooBarNode.getParent();
+    assertTrue(varNode.isVar());
+    assertTrue(varNode.getJSDocInfo().isConstructor());
+  }
 }
