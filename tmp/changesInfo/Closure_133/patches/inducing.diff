diff --git a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
index cb1e074..eaf708d 100644
--- a/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
+++ b/src/com/google/javascript/jscomp/parsing/JsDocInfoParser.java
@@ -18,6 +18,7 @@
 
 import com.google.common.base.Preconditions;
 import com.google.common.collect.ImmutableSet;
+import com.google.common.collect.Lists;
 import com.google.common.collect.Sets;
 import com.google.javascript.jscomp.mozilla.rhino.ErrorReporter;
 import com.google.javascript.jscomp.mozilla.rhino.ast.Comment;
@@ -33,6 +34,7 @@
 import java.util.HashSet;
 import java.util.Map;
 import java.util.Set;
+import java.util.List;
 
 /**
  * A parser for JSDoc comments.
@@ -176,6 +178,8 @@
 
     JsDocToken token = next();
 
+    List<ExtendedTypeInfo> extendedTypes = Lists.newArrayList();
+
     // Always record that we have a comment.
     if (jsdocBuilder.shouldParseDocumentation()) {
       ExtractionInfo blockInfo = extractBlockComment(token);
@@ -408,10 +412,9 @@
                     type = createJSTypeExpression(typeNode);
 
                     if (annotation == Annotation.EXTENDS) {
-                      if (!jsdocBuilder.recordBaseType(type)) {
-                        parser.addTypeWarning(
-                            "msg.jsdoc.incompat.type", lineno, charno);
-                      }
+                      // record the extended type, check later
+                      extendedTypes.add(new ExtendedTypeInfo(
+                          type, stream.getLineno(), stream.getCharno()));
                     } else {
                       Preconditions.checkState(
                           annotation == Annotation.IMPLEMENTS);
@@ -875,7 +878,7 @@
           if (hasParsedFileOverviewDocInfo()) {
             fileOverviewJSDocInfo = retrieveAndResetParsedJSDocInfo();
           }
-
+          checkExtendedTypes(extendedTypes);
           return true;
 
         case EOF:
@@ -883,6 +886,7 @@
           jsdocBuilder.build(null);
           parser.addParserWarning("msg.unexpected.eof",
               stream.getLineno(), stream.getCharno());
+          checkExtendedTypes(extendedTypes);
           return false;
 
         case EOL:
@@ -908,6 +912,27 @@
     }
   }
 
+  private void checkExtendedTypes(List<ExtendedTypeInfo> extendedTypes) {
+    for (ExtendedTypeInfo typeInfo : extendedTypes) {
+      // If interface, record the multiple extended interfaces
+      if (jsdocBuilder.isInterfaceRecorded()) {
+        if (!jsdocBuilder.recordExtendedInterface(typeInfo.type)) {
+          parser.addParserWarning("msg.jsdoc.extends.duplicate",
+              typeInfo.lineno, typeInfo.charno);
+        }
+      }
+
+      // For interfaces, still record the first extended type as base type
+      // It's the temporary setting and will be changed when multiple
+      // extends for interfaces are done
+      if (!jsdocBuilder.recordBaseType(typeInfo.type) &&
+          !jsdocBuilder.isInterfaceRecorded()) {
+        parser.addTypeWarning("msg.jsdoc.incompat.type",
+            typeInfo.lineno, typeInfo.charno);
+      }
+    }
+  }
+
   /**
    * Parse a {@code @suppress} tag of the form
    * {@code @suppress&#123;warning1|warning2&#125;}.
@@ -1207,6 +1232,21 @@
   }
 
   /**
+   * Tuple for recording extended types
+   */
+  private static class ExtendedTypeInfo {
+    final JSTypeExpression type;
+    final int lineno;
+    final int charno;
+
+    public ExtendedTypeInfo(JSTypeExpression type, int lineno, int charno) {
+      this.type = type;
+      this.lineno = lineno;
+      this.charno = charno;
+    }
+  }
+
+  /**
    * Extracts the text found on the current line starting at token. Note that
    * token = token.info; should be called after this method is used to update
    * the token properly in the parser.
diff --git a/src/com/google/javascript/rhino/JSDocInfo.java b/src/com/google/javascript/rhino/JSDocInfo.java
index 74ae292..c4982e1 100644
--- a/src/com/google/javascript/rhino/JSDocInfo.java
+++ b/src/com/google/javascript/rhino/JSDocInfo.java
@@ -88,6 +88,7 @@
 
     // Function information
     JSTypeExpression baseType = null;
+    List<JSTypeExpression> extendedInterfaces = null;
     List<JSTypeExpression> implementedInterfaces = null;
     Map<String, JSTypeExpression> parameters = null;
     List<JSTypeExpression> thrownTypes = null;
@@ -1126,6 +1127,46 @@
   }
 
   /**
+   * Adds an extended interface (for interface only).
+   * Returns whether the type was added.
+   * if the type was already present in the list, it won't get added again.
+   */
+  boolean addExtendedInterface(JSTypeExpression type) {
+    lazyInitInfo();
+    if (info.extendedInterfaces == null) {
+      info.extendedInterfaces = Lists.newArrayListWithCapacity(2);
+    }
+    if (info.extendedInterfaces.contains(type)) {
+      return false;
+    }
+    info.extendedInterfaces.add(type);
+    return true;
+  }
+
+  /**
+   * Returns the interfaces extended by an interface
+   *
+   * @return An immutable list of JSTypeExpression objects that can
+   *    be resolved to types.
+   */
+  public List<JSTypeExpression> getExtendedInterfaces() {
+    if (info == null || info.extendedInterfaces == null) {
+      return ImmutableList.of();
+    }
+    return Collections.unmodifiableList(info.extendedInterfaces);
+  }
+
+  /**
+   * Gets the number of extended interfaces specified
+   */
+  public int getExtendedInterfacesCount() {
+    if (info == null || info.extendedInterfaces == null) {
+      return 0;
+    }
+    return info.extendedInterfaces.size();
+  }
+
+  /**
    * Returns the deprecation reason or null if none specified.
    */
   public String getDeprecationReason() {
@@ -1267,6 +1308,12 @@
         nodes.add(info.baseType.getRoot());
       }
 
+      if (info.extendedInterfaces != null) {
+        for (JSTypeExpression interfaceType : info.extendedInterfaces) {
+          nodes.add(interfaceType.getRoot());
+        }
+      }
+
       if (info.implementedInterfaces != null) {
         for (JSTypeExpression interfaceType : info.implementedInterfaces) {
           nodes.add(interfaceType.getRoot());
diff --git a/src/com/google/javascript/rhino/JSDocInfoBuilder.java b/src/com/google/javascript/rhino/JSDocInfoBuilder.java
index b3d50da..bfc8b18 100644
--- a/src/com/google/javascript/rhino/JSDocInfoBuilder.java
+++ b/src/com/google/javascript/rhino/JSDocInfoBuilder.java
@@ -845,6 +845,18 @@
   }
 
   /**
+   * Records an extended interface type.
+   */
+  public boolean recordExtendedInterface(JSTypeExpression interfaceType) {
+    if (currentInfo.addExtendedInterface(interfaceType)) {
+      populated = true;
+      return true;
+    } else {
+      return false;
+    }
+  }
+
+  /**
    * Records that we're lending to another name.
    */
   public boolean recordLends(String name) {
@@ -867,6 +879,7 @@
         currentInfo.getParameterCount() > 0 ||
         currentInfo.hasReturnType() ||
         currentInfo.hasBaseType() ||
+        currentInfo.getExtendedInterfacesCount() > 0 ||
         currentInfo.getLendsName() != null ||
         currentInfo.hasThisType() ||
         hasAnySingletonTypeTags();
diff --git a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
index 69f6a5b..e6f45be 100644
--- a/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
+++ b/src/com/google/javascript/rhino/jstype/PrototypeObjectType.java
@@ -503,7 +503,8 @@
     /**  The JSDocInfo for this property. */
     private JSDocInfo docInfo = null;
 
-    private Property(JSType type, boolean inferred, boolean inExterns, Node propertyNode) {
+    private Property(JSType type, boolean inferred, boolean inExterns,
+        Node propertyNode) {
       this.type = type;
       this.inferred = inferred;
       this.inExterns = inExterns;