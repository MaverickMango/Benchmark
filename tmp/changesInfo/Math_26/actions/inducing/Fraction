===
insert-tree
---
FieldDeclaration [1293,1825]
    Javadoc [1293,1769]
        TagElement [1304,1719]
            TextElement: The maximal number of denominator digits that can be requested for double to fraction [1304,1389]
            TextElement: conversion. [1397,1408]
            TextElement: <p> [1416,1419]
            TextElement: When <code>d</code> digits are requested, an integer threshold is [1427,1492]
            TextElement: initialized with the value 10<sup>d</sup>. Therefore, <code>d</code> [1500,1568]
            TextElement: cannot be larger than this constant. Since the java language uses 32 bits [1576,1649]
            TextElement: signed integers, the value for this constant is 9. [1657,1707]
            TextElement: </p> [1715,1719]
        TagElement [1735,1761]
            MethodRef [1740,1761]
                SimpleName: Fraction [1741,1749]
                MethodRefParameter [1750,1756]
                    PrimitiveType: double [1750,1756]
                MethodRefParameter [1757,1760]
                    PrimitiveType: int [1757,1760]
    Modifier: public [1774,1780]
    Modifier: static [1781,1787]
    Modifier: final [1788,1793]
    PrimitiveType: int [1794,1797]
    VariableDeclarationFragment [1798,1824]
        SimpleName: MAX_DENOMINATOR_DIGITS [1798,1820]
        NumberLiteral: 9 [1823,1824]
to
TypeDeclaration [923,16946]
at 8
===
insert-tree
---
MethodDeclaration [3280,3913]
    Javadoc [3280,3602]
        TagElement [3291,3357]
            TextElement: Convert a number of denominator digits to a denominator max value. [3291,3357]
        TagElement [3365,3431]
            SimpleName: denominatorDigits [3372,3389]
            TextElement:  The maximum number of denominator digits. [3389,3431]
        TagElement [3439,3480]
            TextElement:  the maximal value for denominator [3446,3480]
        TagElement [3488,3594]
            SimpleName: IllegalArgumentException [3496,3520]
            TextElement:  if more than  [3520,3534]
            TagElement [3534,3565]
                MemberRef [3541,3564]
                    SimpleName: MAX_DENOMINATOR_DIGITS [3542,3564]
            TextElement: are requested [3581,3594]
    Modifier: private [3607,3614]
    Modifier: static [3615,3621]
    PrimitiveType: int [3622,3625]
    SimpleName: maxDenominator [3626,3640]
    SingleVariableDeclaration [3641,3662]
        PrimitiveType: int [3641,3644]
        SimpleName: denominatorDigits [3645,3662]
    SimpleType [3679,3703]
        SimpleName: IllegalArgumentException [3679,3703]
    Block [3708,3913]
        IfStatement [3718,3854]
            InfixExpression [3722,3764]
                SimpleName: denominatorDigits [3722,3739]
                INFIX_EXPRESSION_OPERATOR: > [3740,3741]
                SimpleName: MAX_DENOMINATOR_DIGITS [3742,3764]
            Block [3766,3854]
                ThrowStatement [3780,3844]
                    ClassInstanceCreation [3786,3843]
                        SimpleType [3790,3814]
                            SimpleName: IllegalArgumentException [3790,3814]
                        StringLiteral: "too many digits requested" [3815,3842]
        ReturnStatement [3863,3907]
            CastExpression [3870,3906]
                PrimitiveType: int [3871,3874]
                MethodInvocation [3875,3906]
                    METHOD_INVOCATION_RECEIVER [3875,3879]
                        SimpleName: Math [3875,3879]
                    SimpleName: pow [3880,3883]
                    METHOD_INVOCATION_ARGUMENTS [3884,3905]
                        NumberLiteral: 10 [3884,3886]
                        SimpleName: denominatorDigits [3888,3905]
to
TypeDeclaration [923,16946]
at 14
===
insert-tree
---
MethodDeclaration [3919,4787]
    Javadoc [3919,4586]
        TagElement [3930,4224]
            TextElement: Create a fraction given the double value and maximum number of [3930,3992]
            TextElement: denominator digits. [4000,4019]
            TextElement: <p> [4027,4030]
            TextElement: References: [4038,4049]
            TextElement: <ul> [4057,4061]
            TextElement: <li><a href="http://mathworld.wolfram.com/ContinuedFraction.html"> [4069,4135]
            TextElement: Continued Fraction</a> equations (11) and (22)-(26)</li> [4143,4199]
            TextElement: </ul> [4207,4212]
            TextElement: </p> [4220,4224]
        TagElement [4232,4287]
            SimpleName: value [4239,4244]
            TextElement:  the double value to convert to a fraction. [4244,4287]
        TagElement [4295,4361]
            SimpleName: denominatorDigits [4302,4319]
            TextElement:  The maximum number of denominator digits. [4319,4361]
        TagElement [4369,4464]
            SimpleName: FractionConversionException [4377,4404]
            TextElement:  if the continued fraction failed to [4404,4440]
            TextElement: converge [4456,4464]
        TagElement [4472,4578]
            SimpleName: IllegalArgumentException [4480,4504]
            TextElement:  if more than  [4504,4518]
            TagElement [4518,4549]
                MemberRef [4525,4548]
                    SimpleName: MAX_DENOMINATOR_DIGITS [4526,4548]
            TextElement: are requested [4565,4578]
    Modifier: public [4591,4597]
    SimpleName: Fraction [4598,4606]
    SingleVariableDeclaration [4607,4619]
        PrimitiveType: double [4607,4613]
        SimpleName: value [4614,4619]
    SingleVariableDeclaration [4621,4642]
        PrimitiveType: int [4621,4624]
        SimpleName: denominatorDigits [4625,4642]
    SimpleType [4659,4686]
        SimpleName: FractionConversionException [4659,4686]
    SimpleType [4688,4712]
        SimpleName: IllegalArgumentException [4688,4712]
    Block [4717,4787]
        ConstructorInvocation [4726,4781]
            SimpleName: value [4731,4736]
            NumberLiteral: 0 [4738,4739]
            MethodInvocation [4741,4774]
                SimpleName: maxDenominator [4741,4755]
                METHOD_INVOCATION_ARGUMENTS [4756,4773]
                    SimpleName: denominatorDigits [4756,4773]
            NumberLiteral: 100 [4776,4779]
to
TypeDeclaration [923,16946]
at 15
===
insert-tree
---
MethodDeclaration [4793,7767]
    Javadoc [4793,6204]
        TagElement [4804,5744]
            TextElement: Create a fraction given the double value and either the maximum error [4804,4873]
            TextElement: allowed or the maximum number of denominator digits. [4881,4933]
            TextElement: <p> [4941,4944]
            TextElement: NOTE: This constructor is called with EITHER [4959,5003]
            TextElement: - a valid epsilon value and the maxDenominator set to Integer.MAX_VALUE [5013,5084]
            TextElement: (that way the maxDenominator has no effect). [5096,5140]
            TextElement: OR [5148,5150]
            TextElement: - a valid maxDenominator value and the epsilon value set to zero [5160,5224]
            TextElement: (that way epsilon only has effect if there is an exact match before [5236,5303]
            TextElement: the maxDenominator value is reached). [5315,5352]
            TextElement: <p> [5360,5363]
            TextElement: It has been done this way so that the same code can be (re)used for both [5378,5450]
            TextElement: scenarios. However this could be confusing to users if it were part of [5458,5528]
            TextElement: the public API and this constructor should therefore remain PRIVATE. [5536,5604]
            TextElement: </p> [5612,5616]
            TextElement: See JIRA issue ticket MATH-181 for more details: [5631,5679]
            TextElement: https://issues.apache.org/jira/browse/MATH-181 [5698,5744]
        TagElement [5759,5814]
            SimpleName: value [5766,5771]
            TextElement:  the double value to convert to a fraction. [5771,5814]
        TagElement [5822,5970]
            SimpleName: epsilon [5829,5836]
            TextElement:  maximum error allowed.  The resulting fraction is within [5836,5893]
            TextElement: <code>epsilon</code> of <code>value</code>, in absolute terms. [5908,5970]
        TagElement [5978,6034]
            SimpleName: maxDenominator [5985,5999]
            TextElement:  maximum denominator value allowed. [5999,6034]
        TagElement [6042,6092]
            SimpleName: maxIterations [6049,6062]
            TextElement:  maximum number of convergents [6062,6092]
        TagElement [6100,6196]
            SimpleName: FractionConversionException [6108,6135]
            TextElement:  if the continued fraction failed to [6135,6171]
            TextElement: converge. [6187,6196]
    Modifier: private [6209,6216]
    SimpleName: Fraction [6217,6225]
    SingleVariableDeclaration [6226,6238]
        PrimitiveType: double [6226,6232]
        SimpleName: value [6233,6238]
    SingleVariableDeclaration [6240,6254]
        PrimitiveType: double [6240,6246]
        SimpleName: epsilon [6247,6254]
    SingleVariableDeclaration [6256,6274]
        PrimitiveType: int [6256,6259]
        SimpleName: maxDenominator [6260,6274]
    SingleVariableDeclaration [6276,6293]
        PrimitiveType: int [6276,6279]
        SimpleName: maxIterations [6280,6293]
    SimpleType [6310,6337]
        SimpleName: FractionConversionException [6310,6337]
    Block [6342,7767]
        VariableDeclarationStatement [6352,6370]
            PrimitiveType: double [6352,6358]
            VariableDeclarationFragment [6359,6369]
                SimpleName: r0 [6359,6361]
                SimpleName: value [6364,6369]
        VariableDeclarationStatement [6379,6408]
            PrimitiveType: int [6379,6382]
            VariableDeclarationFragment [6383,6407]
                SimpleName: a0 [6383,6385]
                CastExpression [6388,6407]
                    PrimitiveType: int [6389,6392]
                    MethodInvocation [6393,6407]
                        METHOD_INVOCATION_RECEIVER [6393,6397]
                            SimpleName: Math [6393,6397]
                        SimpleName: floor [6398,6403]
                        METHOD_INVOCATION_ARGUMENTS [6404,6406]
                            SimpleName: r0 [6404,6406]
        IfStatement [6513,6647]
            InfixExpression [6517,6547]
                MethodInvocation [6517,6537]
                    METHOD_INVOCATION_RECEIVER [6517,6521]
                        SimpleName: Math [6517,6521]
                    SimpleName: abs [6522,6525]
                    METHOD_INVOCATION_ARGUMENTS [6526,6536]
                        InfixExpression [6526,6536]
                            SimpleName: a0 [6526,6528]
                            INFIX_EXPRESSION_OPERATOR: - [6529,6530]
                            SimpleName: value [6531,6536]
                INFIX_EXPRESSION_OPERATOR: < [6538,6539]
                SimpleName: epsilon [6540,6547]
            Block [6549,6647]
                ExpressionStatement [6563,6583]
                    Assignment [6563,6582]
                        FieldAccess [6563,6577]
                            ThisExpression [6563,6567]
                            SimpleName: numerator [6568,6577]
                        ASSIGNMENT_OPERATOR: = [6578,6579]
                        SimpleName: a0 [6580,6582]
                ExpressionStatement [6596,6617]
                    Assignment [6596,6616]
                        FieldAccess [6596,6612]
                            ThisExpression [6596,6600]
                            SimpleName: denominator [6601,6612]
                        ASSIGNMENT_OPERATOR: = [6613,6614]
                        NumberLiteral: 1 [6615,6616]
                ReturnStatement [6630,6637]
        VariableDeclarationStatement [6665,6676]
            PrimitiveType: int [6665,6668]
            VariableDeclarationFragment [6669,6675]
                SimpleName: p0 [6669,6671]
                NumberLiteral: 1 [6674,6675]
        VariableDeclarationStatement [6685,6696]
            PrimitiveType: int [6685,6688]
            VariableDeclarationFragment [6689,6695]
                SimpleName: q0 [6689,6691]
                NumberLiteral: 0 [6694,6695]
        VariableDeclarationStatement [6705,6717]
            PrimitiveType: int [6705,6708]
            VariableDeclarationFragment [6709,6716]
                SimpleName: p1 [6709,6711]
                SimpleName: a0 [6714,6716]
        VariableDeclarationStatement [6726,6737]
            PrimitiveType: int [6726,6729]
            VariableDeclarationFragment [6730,6736]
                SimpleName: q1 [6730,6732]
                NumberLiteral: 1 [6735,6736]
        VariableDeclarationStatement [6747,6758]
            PrimitiveType: int [6747,6750]
            VariableDeclarationFragment [6751,6757]
                SimpleName: p2 [6751,6753]
                NumberLiteral: 0 [6756,6757]
        VariableDeclarationStatement [6767,6778]
            PrimitiveType: int [6767,6770]
            VariableDeclarationFragment [6771,6777]
                SimpleName: q2 [6771,6773]
                NumberLiteral: 1 [6776,6777]
        VariableDeclarationStatement [6788,6798]
            PrimitiveType: int [6788,6791]
            VariableDeclarationFragment [6792,6797]
                SimpleName: n [6792,6793]
                NumberLiteral: 0 [6796,6797]
        VariableDeclarationStatement [6807,6828]
            PrimitiveType: boolean [6807,6814]
            VariableDeclarationFragment [6815,6827]
                SimpleName: stop [6815,6819]
                BooleanLiteral: false [6822,6827]
        DoStatement [6837,7418]
            Block [6840,7403]
                ExpressionStatement [6854,6858]
                    PrefixExpression [6854,6857]
                        PREFIX_EXPRESSION_OPERATOR: ++ [6854,6856]
                        SimpleName: n [6856,6857]
                VariableDeclarationStatement [6871,6899]
                    PrimitiveType: double [6871,6877]
                    VariableDeclarationFragment [6878,6898]
                        SimpleName: r1 [6878,6880]
                        InfixExpression [6883,6898]
                            NumberLiteral: 1.0 [6883,6886]
                            INFIX_EXPRESSION_OPERATOR: / [6887,6888]
                            ParenthesizedExpression [6889,6898]
                                InfixExpression [6890,6897]
                                    SimpleName: r0 [6890,6892]
                                    INFIX_EXPRESSION_OPERATOR: - [6893,6894]
                                    SimpleName: a0 [6895,6897]
                VariableDeclarationStatement [6912,6941]
                    PrimitiveType: int [6912,6915]
                    VariableDeclarationFragment [6916,6940]
                        SimpleName: a1 [6916,6918]
                        CastExpression [6921,6940]
                            PrimitiveType: int [6922,6925]
                            MethodInvocation [6926,6940]
                                METHOD_INVOCATION_RECEIVER [6926,6930]
                                    SimpleName: Math [6926,6930]
                                SimpleName: floor [6931,6936]
                                METHOD_INVOCATION_ARGUMENTS [6937,6939]
                                    SimpleName: r1 [6937,6939]
                ExpressionStatement [6954,6974]
                    Assignment [6954,6973]
                        SimpleName: p2 [6954,6956]
                        ASSIGNMENT_OPERATOR: = [6957,6958]
                        InfixExpression [6959,6973]
                            ParenthesizedExpression [6959,6968]
                                InfixExpression [6960,6967]
                                    SimpleName: a1 [6960,6962]
                                    INFIX_EXPRESSION_OPERATOR: * [6963,6964]
                                    SimpleName: p1 [6965,6967]
                            INFIX_EXPRESSION_OPERATOR: + [6969,6970]
                            SimpleName: p0 [6971,6973]
                ExpressionStatement [6987,7007]
                    Assignment [6987,7006]
                        SimpleName: q2 [6987,6989]
                        ASSIGNMENT_OPERATOR: = [6990,6991]
                        InfixExpression [6992,7006]
                            ParenthesizedExpression [6992,7001]
                                InfixExpression [6993,7000]
                                    SimpleName: a1 [6993,6995]
                                    INFIX_EXPRESSION_OPERATOR: * [6996,6997]
                                    SimpleName: q1 [6998,7000]
                            INFIX_EXPRESSION_OPERATOR: + [7002,7003]
                            SimpleName: q0 [7004,7006]
                VariableDeclarationStatement [7033,7077]
                    PrimitiveType: double [7033,7039]
                    VariableDeclarationFragment [7040,7076]
                        SimpleName: convergent [7040,7050]
                        InfixExpression [7053,7076]
                            CastExpression [7053,7063]
                                PrimitiveType: double [7054,7060]
                                SimpleName: p2 [7061,7063]
                            INFIX_EXPRESSION_OPERATOR: / [7064,7065]
                            CastExpression [7066,7076]
                                PrimitiveType: double [7067,7073]
                                SimpleName: q2 [7074,7076]
                IfStatement [7090,7393]
                    InfixExpression [7094,7176]
                        InfixExpression [7094,7153]
                            InfixExpression [7094,7111]
                                SimpleName: n [7094,7095]
                                INFIX_EXPRESSION_OPERATOR: < [7096,7097]
                                SimpleName: maxIterations [7098,7111]
                            INFIX_EXPRESSION_OPERATOR: && [7112,7114]
                            InfixExpression [7115,7153]
                                MethodInvocation [7115,7143]
                                    METHOD_INVOCATION_RECEIVER [7115,7119]
                                        SimpleName: Math [7115,7119]
                                    SimpleName: abs [7120,7123]
                                    METHOD_INVOCATION_ARGUMENTS [7124,7142]
                                        InfixExpression [7124,7142]
                                            SimpleName: convergent [7124,7134]
                                            INFIX_EXPRESSION_OPERATOR: - [7135,7136]
                                            SimpleName: value [7137,7142]
                                INFIX_EXPRESSION_OPERATOR: > [7144,7145]
                                SimpleName: epsilon [7146,7153]
                        INFIX_EXPRESSION_OPERATOR: && [7154,7156]
                        InfixExpression [7157,7176]
                            SimpleName: q2 [7157,7159]
                            INFIX_EXPRESSION_OPERATOR: < [7160,7161]
                            SimpleName: maxDenominator [7162,7176]
                    Block [7178,7343]
                        ExpressionStatement [7196,7204]
                            Assignment [7196,7203]
                                SimpleName: p0 [7196,7198]
                                ASSIGNMENT_OPERATOR: = [7199,7200]
                                SimpleName: p1 [7201,7203]
                        ExpressionStatement [7221,7229]
                            Assignment [7221,7228]
                                SimpleName: p1 [7221,7223]
                                ASSIGNMENT_OPERATOR: = [7224,7225]
                                SimpleName: p2 [7226,7228]
                        ExpressionStatement [7246,7254]
                            Assignment [7246,7253]
                                SimpleName: q0 [7246,7248]
                                ASSIGNMENT_OPERATOR: = [7249,7250]
                                SimpleName: q1 [7251,7253]
                        ExpressionStatement [7271,7279]
                            Assignment [7271,7278]
                                SimpleName: q1 [7271,7273]
                                ASSIGNMENT_OPERATOR: = [7274,7275]
                                SimpleName: q2 [7276,7278]
                        ExpressionStatement [7296,7304]
                            Assignment [7296,7303]
                                SimpleName: a0 [7296,7298]
                                ASSIGNMENT_OPERATOR: = [7299,7300]
                                SimpleName: a1 [7301,7303]
                        ExpressionStatement [7321,7329]
                            Assignment [7321,7328]
                                SimpleName: r0 [7321,7323]
                                ASSIGNMENT_OPERATOR: = [7324,7325]
                                SimpleName: r1 [7326,7328]
                    Block [7349,7393]
                        ExpressionStatement [7367,7379]
                            Assignment [7367,7378]
                                SimpleName: stop [7367,7371]
                                ASSIGNMENT_OPERATOR: = [7372,7373]
                                BooleanLiteral: true [7374,7378]
            PrefixExpression [7411,7416]
                PREFIX_EXPRESSION_OPERATOR: ! [7411,7412]
                SimpleName: stop [7412,7416]
        IfStatement [7428,7536]
            InfixExpression [7432,7450]
                SimpleName: n [7432,7433]
                INFIX_EXPRESSION_OPERATOR: >= [7434,7436]
                SimpleName: maxIterations [7437,7450]
            Block [7452,7536]
                ThrowStatement [7466,7526]
                    ClassInstanceCreation [7472,7525]
                        SimpleType [7476,7503]
                            SimpleName: FractionConversionException [7476,7503]
                        SimpleName: value [7504,7509]
                        SimpleName: maxIterations [7511,7524]
        IfStatement [7554,7743]
            InfixExpression [7558,7577]
                SimpleName: q2 [7558,7560]
                INFIX_EXPRESSION_OPERATOR: < [7561,7562]
                SimpleName: maxDenominator [7563,7577]
            Block [7579,7658]
                ExpressionStatement [7593,7613]
                    Assignment [7593,7612]
                        FieldAccess [7593,7607]
                            ThisExpression [7593,7597]
                            SimpleName: numerator [7598,7607]
                        ASSIGNMENT_OPERATOR: = [7608,7609]
                        SimpleName: p2 [7610,7612]
                ExpressionStatement [7626,7648]
                    Assignment [7626,7647]
                        FieldAccess [7626,7642]
                            ThisExpression [7626,7630]
                            SimpleName: denominator [7631,7642]
                        ASSIGNMENT_OPERATOR: = [7643,7644]
                        SimpleName: q2 [7645,7647]
            Block [7664,7743]
                ExpressionStatement [7678,7698]
                    Assignment [7678,7697]
                        FieldAccess [7678,7692]
                            ThisExpression [7678,7682]
                            SimpleName: numerator [7683,7692]
                        ASSIGNMENT_OPERATOR: = [7693,7694]
                        SimpleName: p1 [7695,7697]
                ExpressionStatement [7711,7733]
                    Assignment [7711,7732]
                        FieldAccess [7711,7727]
                            ThisExpression [7711,7715]
                            SimpleName: denominator [7716,7727]
                        ASSIGNMENT_OPERATOR: = [7728,7729]
                        SimpleName: q1 [7730,7732]
        ExpressionStatement [7752,7761]
            MethodInvocation [7752,7760]
                SimpleName: reduce [7752,7758]
to
TypeDeclaration [923,16946]
at 16
===
update-node
---
NumberLiteral: 6222990762865980424L [1385,1405]
replace 6222990762865980424L by 5463066929751300926L
===
insert-tree
---
ConstructorInvocation [3213,3268]
    SimpleName: value [3218,3223]
    SimpleName: epsilon [3225,3232]
    QualifiedName: Integer.MAX_VALUE [3234,3251]
    SimpleName: maxIterations [3253,3266]
to
Block [2640,3904]
at 0
===
update-node
---
TextElement: Create a fraction given the double value. [1888,1929]
replace Create a fraction given the double value. by Create a fraction given the double value and maximum error allowed.
===
delete-tree
---
VariableDeclarationStatement [2650,2668]
    PrimitiveType: double [2650,2656]
    VariableDeclarationFragment [2657,2667]
        SimpleName: r0 [2657,2659]
        SimpleName: value [2662,2667]
===
delete-tree
---
VariableDeclarationStatement [2677,2706]
    PrimitiveType: int [2677,2680]
    VariableDeclarationFragment [2681,2705]
        SimpleName: a0 [2681,2683]
        CastExpression [2686,2705]
            PrimitiveType: int [2687,2690]
            MethodInvocation [2691,2705]
                METHOD_INVOCATION_RECEIVER [2691,2695]
                    SimpleName: Math [2691,2695]
                SimpleName: floor [2696,2701]
                METHOD_INVOCATION_ARGUMENTS [2702,2704]
                    SimpleName: r0 [2702,2704]
===
delete-tree
---
IfStatement [2811,2945]
    InfixExpression [2815,2845]
        MethodInvocation [2815,2835]
            METHOD_INVOCATION_RECEIVER [2815,2819]
                SimpleName: Math [2815,2819]
            SimpleName: abs [2820,2823]
            METHOD_INVOCATION_ARGUMENTS [2824,2834]
                InfixExpression [2824,2834]
                    SimpleName: a0 [2824,2826]
                    INFIX_EXPRESSION_OPERATOR: - [2827,2828]
                    SimpleName: value [2829,2834]
        INFIX_EXPRESSION_OPERATOR: < [2836,2837]
        SimpleName: epsilon [2838,2845]
    Block [2847,2945]
        ExpressionStatement [2861,2881]
            Assignment [2861,2880]
                FieldAccess [2861,2875]
                    ThisExpression [2861,2865]
                    SimpleName: numerator [2866,2875]
                ASSIGNMENT_OPERATOR: = [2876,2877]
                SimpleName: a0 [2878,2880]
        ExpressionStatement [2894,2915]
            Assignment [2894,2914]
                FieldAccess [2894,2910]
                    ThisExpression [2894,2898]
                    SimpleName: denominator [2899,2910]
                ASSIGNMENT_OPERATOR: = [2911,2912]
                NumberLiteral: 1 [2913,2914]
        ReturnStatement [2928,2935]
===
delete-tree
---
VariableDeclarationStatement [2963,2974]
    PrimitiveType: int [2963,2966]
    VariableDeclarationFragment [2967,2973]
        SimpleName: p0 [2967,2969]
        NumberLiteral: 1 [2972,2973]
===
delete-tree
---
VariableDeclarationStatement [2983,2994]
    PrimitiveType: int [2983,2986]
    VariableDeclarationFragment [2987,2993]
        SimpleName: q0 [2987,2989]
        NumberLiteral: 0 [2992,2993]
===
delete-tree
---
VariableDeclarationStatement [3003,3015]
    PrimitiveType: int [3003,3006]
    VariableDeclarationFragment [3007,3014]
        SimpleName: p1 [3007,3009]
        SimpleName: a0 [3012,3014]
===
delete-tree
---
VariableDeclarationStatement [3024,3035]
    PrimitiveType: int [3024,3027]
    VariableDeclarationFragment [3028,3034]
        SimpleName: q1 [3028,3030]
        NumberLiteral: 1 [3033,3034]
===
delete-tree
---
VariableDeclarationStatement [3045,3056]
    PrimitiveType: int [3045,3048]
    VariableDeclarationFragment [3049,3055]
        SimpleName: p2 [3049,3051]
        NumberLiteral: 0 [3054,3055]
===
delete-tree
---
VariableDeclarationStatement [3065,3076]
    PrimitiveType: int [3065,3068]
    VariableDeclarationFragment [3069,3075]
        SimpleName: q2 [3069,3071]
        NumberLiteral: 1 [3074,3075]
===
delete-tree
---
VariableDeclarationStatement [3086,3096]
    PrimitiveType: int [3086,3089]
    VariableDeclarationFragment [3090,3095]
        SimpleName: n [3090,3091]
        NumberLiteral: 0 [3094,3095]
===
delete-tree
---
VariableDeclarationStatement [3105,3126]
    PrimitiveType: boolean [3105,3112]
    VariableDeclarationFragment [3113,3125]
        SimpleName: stop [3113,3117]
        BooleanLiteral: false [3120,3125]
===
delete-tree
---
DoStatement [3135,3693]
    Block [3138,3678]
        ExpressionStatement [3152,3156]
            PrefixExpression [3152,3155]
                PREFIX_EXPRESSION_OPERATOR: ++ [3152,3154]
                SimpleName: n [3154,3155]
        VariableDeclarationStatement [3169,3197]
            PrimitiveType: double [3169,3175]
            VariableDeclarationFragment [3176,3196]
                SimpleName: r1 [3176,3178]
                InfixExpression [3181,3196]
                    NumberLiteral: 1.0 [3181,3184]
                    INFIX_EXPRESSION_OPERATOR: / [3185,3186]
                    ParenthesizedExpression [3187,3196]
                        InfixExpression [3188,3195]
                            SimpleName: r0 [3188,3190]
                            INFIX_EXPRESSION_OPERATOR: - [3191,3192]
                            SimpleName: a0 [3193,3195]
        VariableDeclarationStatement [3210,3239]
            PrimitiveType: int [3210,3213]
            VariableDeclarationFragment [3214,3238]
                SimpleName: a1 [3214,3216]
                CastExpression [3219,3238]
                    PrimitiveType: int [3220,3223]
                    MethodInvocation [3224,3238]
                        METHOD_INVOCATION_RECEIVER [3224,3228]
                            SimpleName: Math [3224,3228]
                        SimpleName: floor [3229,3234]
                        METHOD_INVOCATION_ARGUMENTS [3235,3237]
                            SimpleName: r1 [3235,3237]
        ExpressionStatement [3252,3272]
            Assignment [3252,3271]
                SimpleName: p2 [3252,3254]
                ASSIGNMENT_OPERATOR: = [3255,3256]
                InfixExpression [3257,3271]
                    ParenthesizedExpression [3257,3266]
                        InfixExpression [3258,3265]
                            SimpleName: a1 [3258,3260]
                            INFIX_EXPRESSION_OPERATOR: * [3261,3262]
                            SimpleName: p1 [3263,3265]
                    INFIX_EXPRESSION_OPERATOR: + [3267,3268]
                    SimpleName: p0 [3269,3271]
        ExpressionStatement [3285,3305]
            Assignment [3285,3304]
                SimpleName: q2 [3285,3287]
                ASSIGNMENT_OPERATOR: = [3288,3289]
                InfixExpression [3290,3304]
                    ParenthesizedExpression [3290,3299]
                        InfixExpression [3291,3298]
                            SimpleName: a1 [3291,3293]
                            INFIX_EXPRESSION_OPERATOR: * [3294,3295]
                            SimpleName: q1 [3296,3298]
                    INFIX_EXPRESSION_OPERATOR: + [3300,3301]
                    SimpleName: q0 [3302,3304]
        VariableDeclarationStatement [3331,3375]
            PrimitiveType: double [3331,3337]
            VariableDeclarationFragment [3338,3374]
                SimpleName: convergent [3338,3348]
                InfixExpression [3351,3374]
                    CastExpression [3351,3361]
                        PrimitiveType: double [3352,3358]
                        SimpleName: p2 [3359,3361]
                    INFIX_EXPRESSION_OPERATOR: / [3362,3363]
                    CastExpression [3364,3374]
                        PrimitiveType: double [3365,3371]
                        SimpleName: q2 [3372,3374]
        IfStatement [3388,3668]
            InfixExpression [3392,3451]
                InfixExpression [3392,3409]
                    SimpleName: n [3392,3393]
                    INFIX_EXPRESSION_OPERATOR: < [3394,3395]
                    SimpleName: maxIterations [3396,3409]
                INFIX_EXPRESSION_OPERATOR: && [3410,3412]
                InfixExpression [3413,3451]
                    MethodInvocation [3413,3441]
                        METHOD_INVOCATION_RECEIVER [3413,3417]
                            SimpleName: Math [3413,3417]
                        SimpleName: abs [3418,3421]
                        METHOD_INVOCATION_ARGUMENTS [3422,3440]
                            InfixExpression [3422,3440]
                                SimpleName: convergent [3422,3432]
                                INFIX_EXPRESSION_OPERATOR: - [3433,3434]
                                SimpleName: value [3435,3440]
                    INFIX_EXPRESSION_OPERATOR: > [3442,3443]
                    SimpleName: epsilon [3444,3451]
            Block [3453,3618]
                ExpressionStatement [3471,3479]
                    Assignment [3471,3478]
                        SimpleName: p0 [3471,3473]
                        ASSIGNMENT_OPERATOR: = [3474,3475]
                        SimpleName: p1 [3476,3478]
                ExpressionStatement [3496,3504]
                    Assignment [3496,3503]
                        SimpleName: p1 [3496,3498]
                        ASSIGNMENT_OPERATOR: = [3499,3500]
                        SimpleName: p2 [3501,3503]
                ExpressionStatement [3521,3529]
                    Assignment [3521,3528]
                        SimpleName: q0 [3521,3523]
                        ASSIGNMENT_OPERATOR: = [3524,3525]
                        SimpleName: q1 [3526,3528]
                ExpressionStatement [3546,3554]
                    Assignment [3546,3553]
                        SimpleName: q1 [3546,3548]
                        ASSIGNMENT_OPERATOR: = [3549,3550]
                        SimpleName: q2 [3551,3553]
                ExpressionStatement [3571,3579]
                    Assignment [3571,3578]
                        SimpleName: a0 [3571,3573]
                        ASSIGNMENT_OPERATOR: = [3574,3575]
                        SimpleName: a1 [3576,3578]
                ExpressionStatement [3596,3604]
                    Assignment [3596,3603]
                        SimpleName: r0 [3596,3598]
                        ASSIGNMENT_OPERATOR: = [3599,3600]
                        SimpleName: r1 [3601,3603]
            Block [3624,3668]
                ExpressionStatement [3642,3654]
                    Assignment [3642,3653]
                        SimpleName: stop [3642,3646]
                        ASSIGNMENT_OPERATOR: = [3647,3648]
                        BooleanLiteral: true [3649,3653]
    PrefixExpression [3686,3691]
        PREFIX_EXPRESSION_OPERATOR: ! [3686,3687]
        SimpleName: stop [3687,3691]
===
delete-tree
---
IfStatement [3703,3811]
    InfixExpression [3707,3725]
        SimpleName: n [3707,3708]
        INFIX_EXPRESSION_OPERATOR: >= [3709,3711]
        SimpleName: maxIterations [3712,3725]
    Block [3727,3811]
        ThrowStatement [3741,3801]
            ClassInstanceCreation [3747,3800]
                SimpleType [3751,3778]
                    SimpleName: FractionConversionException [3751,3778]
                SimpleName: value [3779,3784]
                SimpleName: maxIterations [3786,3799]
===
delete-tree
---
ExpressionStatement [3829,3849]
    Assignment [3829,3848]
        FieldAccess [3829,3843]
            ThisExpression [3829,3833]
            SimpleName: numerator [3834,3843]
        ASSIGNMENT_OPERATOR: = [3844,3845]
        SimpleName: p2 [3846,3848]
===
delete-tree
---
ExpressionStatement [3858,3880]
    Assignment [3858,3879]
        FieldAccess [3858,3874]
            ThisExpression [3858,3862]
            SimpleName: denominator [3863,3874]
        ASSIGNMENT_OPERATOR: = [3875,3876]
        SimpleName: q2 [3877,3879]
===
delete-tree
---
ExpressionStatement [3889,3898]
    MethodInvocation [3889,3897]
        SimpleName: reduce [3889,3895]
